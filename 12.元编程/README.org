* 元编程
  元编程来源于 *Meta-Programming* 一词, *Meta* 表示 "关于某事本身的某事". 所以
  Meta-Programming 就代表了 *元编程*.  通过元编程的手段可以让程序生成新的程序. 

  元编程在计算机领域是一个非常重要的概念, 它允许程序将代码作为数据, 在运行(或编
  译)时对代码进行修改或替换, 从而让编程语言产生更加强大的表达能力. 总之, 元编程
  就是支持用代码生成代码的一种方式. 各种编程语言中或多或少都提供了基本的元编程能
  力. eg: C/C++ 中, 可以使用预编译器对 *宏定义* 进行文本替换. eg: Rust、Ruby 或
  Elixir 等语言, 则是通过操作 AST 来提供更强大的元编程能力. 另外, Rust 中利用泛
  型进行静态分发, 所以放心也是元编程的一种能力, 同样, C++ 中的模板也可以做到和泛
  型编程类似的事情.

  元编程技术大概可以分为以下几类:

  - *简单文本替换*: eg: C/C++ 中的宏定义, 在编译期直接进行文本替换
  - *类型模板*: eg: C++ 语言支持模板元编程
  - *反射*: eg: Ruby、Java、Go 和 Rust 等或多或少都支持反射, 在运行时或编译时获
    取程序的内部信息
  - *语法扩展*: eg: Ruby、Elixir、Rust 等语言可以对 AST 进行操作而扩展语言的语法
  - *代码自动生成*: eg: Go 语言提供 go generate 命令来根据指定的注释自动生成代码.

  其实语法扩展和代码自动生成的关系比较微妙, 语法扩展是对 AST 进行扩展, 实际上也
  相当于生成了代码. 但是语法扩展是为了扩展语法而生成代码, eg: Rust 的 derive 属
  性, 可以为结构体自动实现一些 trait. 而代码自动生成是指在开发中为了减少代码重复
  或其他原因而自动生成一些代码.

  使用元编程可以做到很多普通函数做不到的事情, eg: 复用代码、编写领域专用语言
  (DSL)等. Rust 语言通过反射和 AST 语法扩展两种手段来支持元编程.

** 反射
   反射(Reflect)机制一般是指程序自我访问、检测和修改其自身状态或行为的能力. Rust
   标准库提供了 ~std::any::Any~ 来支持运行时反射

   #+begin_src rust
     #[stable(feature = "rust1", since = "1.0.0")]
     // 注意: 该 trait 加上了 `'static` 生命周期限定, 意味着该 trait 不能被非生命周期的类型实现.
     pub trait Any: 'static {
         #[stable(feature = "get_type_id", since = "1.34.0")]
         // 返回 唯一标识 的 TypeId 类型, 该标识在编译时生成
         // 每个 TypeId 都是一个 "黑盒", 不能检查其内部内容, 但是允许复制、比较、打印等其他操作
         // TypeId 同样仅限于静态生命周期的类型, 但在未来可能会取消该限制
         fn type_id(&self) -> TypeId;
     }


     #[stable(feature = "rust1", since = "1.0.0")]
     // 任何满足 `'static` 生命周期的类型均实现了它
     impl<T: 'static + ?Sized> Any for T {
         fn type_id(&self) -> TypeId {
             TypeId::of::<T>()
         }
     }
   #+end_src

   Any 还实现了一些方法用于 *运行时检查类型*:
   
   Any 中实现的 ~is()~ 方法源码
   #+begin_src rust
     impl dyn Any {
         #[stable(feature = "rust1", since = "1.0.0")]
         #[inline]
         // 因为 `Any` 是 trait, 此处的 `&self` 必然是一个 trait 对象
         pub fn is<T: Any>(&self) -> bool {
             // Get `TypeId` of the type this function is instantiated with.
             // 通过 `TypeId::of()` 函数来获取类型 T 的全局唯一标识符 t
             let t = TypeId::of::<T>();

             // Get `TypeId` of the type in the trait object (`self`).
             // 同样得到一个全局唯一标识符 `concrete`, 实际上也是调用了 `TypeId::of()` 函数
             let concrete = self.type_id();

             // Compare both `TypeId`s on equality.
             // 比较 t 和 concrete 值是否相等
             t == concrete
         }
     }
   #+end_src

*** 通过 is 函数判断类型
    通过 ~println()~ 输出可以看出, TypeId 是一个结构体, 其字段 t 存储了一串数字,
    这就是 *全局唯一类型标识符*, 实际上是 u64 类型. 代表唯一标识符的这串数字, 在
    不同的编译环境中, 产生的结果是不同的. 所以在实际开发中, 最好不要将 TypeId 暴
    露到外部接口中被当作依赖.

*** 转换到具体类型
    Any 也提供了 ~downcast_ref()~ 和 ~downcast_mut()~ 两个成对的泛型方法, 用于将
    方向 T 向下转为具体的类型. 返回值分别为 ~Option<&T>~ 和 ~Option<&mut T>~ 类
    型. 其中 ~downcast_ref()~ 将内心 T 转换为不可变引用, 而 ~downcast_mut()~ 将
    类型 T 转换为可变引用.
    
    *注意*: ~Box<Any>~ 类型是独占所有权的类型, 所以无法像 12-5 那样匹配多种类型.

*** 非静态生命周期类型
    非静态生命周期类型没有实现 Any. 所以无法赋值给 Any 类型.

    对于带生命周期的结构体, 成员内生命周期为 ~static~ 时, 结构体作为已实现 Any
    的结构体.

** 宏系统
   Rust 中反射的功能虽然有限, 但除此之外, Rust 还提供了功能强大的 *宏(Macro)* 来
   支持元编程. 宏是一种批处理的称谓, 通常来说, 是根据预定义的规则转换成相应地输
   出. 这种转换过程叫做 *宏展开*.

*** 起源
    现在很多语言都提供了宏操作, 大致可以分为两类: *文本替换* 和 *语法扩展*.

    C 语言中的宏函数就属于文本替换. 由于 C 的宏是纯文本替换, 预处理器并不会对宏
    体做任何检查, 所以使用它的时候经常会出现问题.
    
    另外一种可以进行语法扩展的宏起源于 Lisp 语言. Lisp 的宏可以利用 *S 表达式
    (S-Expr)*, 将代码作为数据, 生成新的代码, 而这些代码又可以被执行, 这就赋予了
    Lisp 宏强大的可能性, 包括可以由此进行语法扩展, 甚至创造新的语法. 简单来说,
    Lisp 宏就是将一个 S 表达式转变为另一个 S 表达式.
    
    #+begin_src lisp
      (defmacro one! (var)
        (list 'setq var 1)
        )

      (+ (one! x ) 2) ;; 调用 one!
      (+ (setq x 1) 2) ;; 宏展开
      )
    #+end_src

    以上表达式通过宏展开, 将 ~one!~ 替换为 ~(setq x 1)~, 从而生成新的 S 表达式
    ~(+ (setq x 1) 2)~

    所谓 S 表达式, 是指人类可读的文本形式的一种三元结构, 形如 "(1 2 3)" 在 Lisp
    语言中既可以作为代码, 也可用作数据. ~(+ setq x 1) 2)~ 就是一个 S 表达式. S
    表达式实际上等价于二叉树结构.

    #+begin_example
      (+
        (setq x 1)
        2
        )


                                         +
                  macro  expension      / \
      (one! x) ------------------->  setq  2
                                     /  \
                                    x    1
    #+end_example

    上图展示了 S 表达式等价的二叉树结构, 其中每个节点就是 S 表达式中的元素. 当 S
    表达式中存在宏的时候, 就会将其展开, 从而让之前的 S 表达式形成新的 S 表达式.
    *这里值得注意的是*, 宏调用和函数调用之间的区别, 宏调用产生的是 S 表达式, 而
    函数调用会产生具体的值, 认清这个区别比较重要. S 表达式是 Lisp 语言精华化所在,
    这种思想对现在的很多语言都影响颇深.

    除了 C 语言的文本替换宏外, 其他现代编程语言中提供的宏都可以通过直接操作抽象
    语法树的方式来进行语法苦中含. 不同的语言提供的宏形式有所不同. 有的提供了显式
    地宏语法, eg: ~defmacro~ / ~macro~ 等关键字来定义宏, 有的语言则通过其他形式,
    eg: Python 中的装饰器(decorator) 和 Ruby 中的块(block), 均可以达成操作抽象语
    法树的目的, 殊途同归. 而抽象语法树就等价于 Lisp 中的 S 表达式, 用 S 表达式可
    以表示任何语言的抽象语法树.

    Rust 开发者可以编写特定的宏, 在编译时通过宏展开的方式操作抽象语法树, 从而达
    到语法扩展的目的.

*** Rust 中宏的种类
    Rust 的宏系统按定义的方式可以分为两大类:
    - *声明宏* (Declarative Macro)
    - *过程宏* (Procedural Macro)

    *警告*: 内容有改动
    声明宏是指通过 ~macro_rules!~ 声明定义的宏, 它是 Rust 中最常用的宏.(当前版本
    已可在 Stable 下使用).

    过程宏是编译器语法扩展的方式之一. Rust 允许通过特定的语法编写编译器插件, 但
    该编写插件的语法还未稳定, 所以提供了过程宏来让开发者实现自定义派生属性的功能.
    eg: Serde 库实现的 ~#[derive(Serialize, Deserialize)]~ 就是基于过程实现的.

    具体到宏使用的语法形式又分为以下几种:
    - *调用宏*: 形如 ~println!~, ~assert_eq!~, ~thread_local!~ 等可以当作函数调
      用的宏. 这种形式的宏通常由声明宏来实现, 也可以通过过程宏实现.
    - *属性宏*: 也就是形如 ~#[derive(Debug)]~ 或 ~#[cfg]~ 这种形式的语法. 这种形
      式的宏可以通过过程宏来实现, 也可以通过编译器插件来实现.

    按宏的 *来源*, 可以分为以下两类:
    - *内置宏*: 指 Rust 本身内置的一些宏, 包括 2 种: 一种由标准库中具体的代码实
      现, 另一种属于编译器固有行为.
    - *自定义宏*: 指由开发者自己定义的声明宏或者过程宏等

    内置宏展示
    #+begin_src rust
      #[macro_export]
      #[stable(feature = "rust1", since = "1.0.0")]
      #[allow_internal_unstable(print_internals, format_args_nl)]
      macro_rules! println {
          () => ($crate::print!("\n"));
          ($($arg:tt)*) => ({
              $crate::io::_print($crate::format_args_nl!($($arg)*));
          })
      }
    #+end_src

    
*** 编译过程
    Rust 整个编译过程
    #+begin_example
                 分词            解析
      Rust Code ----->  Token  ------> AST
                                        |
                                    简  |
                                    化  |
                                        ↓
                                       HIR
                                        |
                                        | 简
                                        | 化
                                        ↓    转译             优化
                                       MIR -------> LLVM IR -----> Machine Code
    #+end_example

    Rust 源码的整个编译过程可以大致分为六个主要阶段:
    1. *分词阶段*: 通过词法分析将源码分为一系列的词条(Token)
    2. *解析阶段*: 通过语法解析, 将词条解析为 AST
    3. *提炼 HIR*: 通过对 AST 进一步提炼简化, 得到高级中间语言(High-Level IR,
       HIR), 专门用于类型检查和一些相关的分析工作. HIR 相比于 AST, 简化了语法信
       息, 因为 HIR 不需要知道代码的语法元素
    4. *提炼 MIR*: 通过对 HIR 的再次提炼, 剔除一些不必要的元素之后得到中级中间语
       言(Middle-Level IR, MIR), 专门用于检查以及其他的优化工作, eg: 支持增量编
       译等
    5. *转译为 LLVM IR*: 将 MIR 转译 生成为 LLVMIR 语言, 交由 LLVM 去做后续处理.
    6. *生成机器码*: 将 LLVM IR 警告一系列的优化生成机器码(.o)文件, 最终交给链接
       器去处理.

    以上工作均由 Rust 编译器来完成, 不同的阶段使用了不同的内部组件, 并且不同的编
    译阶段有不同的工作目标. 现在只关注与宏系统相关的分词和解析.

**** 词条流
     Rust 代码编译器的第一步, 就是通过词法分析把代码文本分词为一系列的词条
     (Tokens).

     词条一般包括以下几类:
     - *标识符*: 源码汇总的关键字、变量等都被识别为标识符
     - *字面量*: eg: 字符串字面量
     - *运算符*: eg: 四目运算, 逻辑运算符等
     - *界符*: eg: 分号、逗号、冒号、圆括号、花括号、箭头灯

     以 12-15 的函数 ~t~ 为例来说, 编译器会对该函数从左到右依次识别. ~fn~ 关键字
     会被识别为一个标识符(Identifier), 函数名 ~t~ 同样也是一个标识符. 当碰到圆括
     号的时候, 编译器会以圆括号为界, 将其看做一个独立的组合进行分词处理. 函数签
     名代表返回值的右箭头(->)也会被识别为一个独立的界符词条, 返回值类型 ~i32~ 同
     样也是一个标识符. 最后的函数体会以花括号为界, 作为一个独立的组合进行分词处
     理.

     通过编译器提供的命令可以查看 12-15 代码生成的词条和 AST 信息

     输出语法树的 rustc 命令:
     #+begin_src sh
       # 若为独立文件
       rustc -Z ast-json main.rs
       # 若为 cargo 生成的二进制包
       cargo rustc -- -Z ast-json
     #+end_src

     以上命令会生成 JSON 格式的 AST 信息, 其中包含了词法分析之后的词条信息和 AST
     信息.

     执行过后, 代码汇总的空格换行已经被丢弃, 关键字等各种语法元素已经被识别为单
     独的词条. 整段函数最后就变为词条组成的序列, 称为词条流. 词条流对于编译期后
     续生成 AST 来说意义重大

**** 抽象语法树
     词条流虽然可以区分标识符、括号或箭头灯其他语法元素, 但本身并不携带任何语法
     信息, 必须经过语法解析阶段, 生成 AST, 编译器才能最终识别 Rust 代码的意义.

     用 S 表达式来表示 AST:
     #+begin_example
       // a + b + ( c + d[0] ) + e
          (
            +
            (
              +
              ( + a b )
              (+ c (index d 0) )
            )
            e
          )
     #+end_example
     
     在生成 AST 之后, 编译器就可以完全识别原始代码中所携带的语法信息. 接下来只需
     要依次遍历节点就可以进行之后的工作, eg: 节点中如果包含了宏, 则继续将其展开
     为 AST, 知道最终节点中不包含任何宏为止


*** 声明宏
    声明宏是 Rust 语言中最常用的宏, 它可以通过 ~macro_rules!~ 来创建, 它有时也被
    称为 "示例宏(Macro by example, MBE)".

**** 声明宏的定义和展开过程
     使用 ~macro_rules!~ 定义声明宏, 格式示意
     #+begin_src rust
       macro_rules! $name {
           $rule0;
           $rule1;
           // ...
           $ruleN;
       }
     #+end_src

     以上为伪代码示意 ~$name~ 表示宏的名字, ~$rule0~ 到 ~$ruleN~ 表示 N 个宏要匹
     配的规则. 其中每个规则也有固定的格式.
     
     声明宏中每个匹配规则要满足的格式示意
     #+begin_src rust
       ( $pattern ) => ( $expansion )
     #+end_src
     
     ~$pattern~ 代表每个匹配规则的模式, ~$expansion~ 代表与模式相应的展开代码.
     以 12-12 出现过的 ~unless!~ 宏定义来说, 匹配模式为 ~($arg: expr, $branch:
     expr)~, 展开代码是 ~(if!$arg{$branch})~. 声明宏中定义的规则也属于一种类似于
     match 的模式匹配.

     匹配模式中 ~$arg: expr~ 这种格式为声明宏定义中的通用格式. ~$arg~ 为 *捕获变
     量*, 可以自由命名, 但必须以 ~$~ 字符开头. 冒号后面的叫 *捕获类型*, 在该示例
     中 expr 对应于宏解析器解析生成之后词条的类型, 指代表达式.

     展开代码中包含了捕获变量 ~$arg~ 和 ~$branch~, 表示在宏规则匹配成功之后, 将
     捕获到的变量的内容替换到相应的位置, 从而达到生成代码的目的.

     输出宏展开后代码的编译器命令
     #+begin_src sh
       rustc -Z unstable-options --pretty=expanded main.rs

       cargo rustc -- -Z unstable-options --pretty=expanded
     #+end_src

     宏展开后的代码
     #+begin_src rust
       fn main() {
           let (a, b) = (1, 2);
           if !(a > b) {
               {
                   b - a;
               }
           };
       }
     #+end_src

     宏调用时, 先根据宏定义中的 ~=>~ 符号左侧的模式进行匹配, 然后根据匹配之后捕
     获的结果对该符号右侧的展开代码进行替换. 这个匹配和替换的过程就是宏展开, 整
     个过程发生在语法解析阶段.

     实际上, 编译器内部有 2 个解析器, 一个是 *通用解析器* (Normal Parser), 另一
     个是 *宏解析器* (Macro Parser). 通用解析器用于处理大部分词条流进一步生成
     AST, 但是在碰到宏调用时则会跳过. 并不对宏调用进行任何处理, 反而会在 AST 中
     保留宏调用节点. 然后, 宏解析器会将这些宏调用节点展开为正常的 AST 节点.
     
**** 声明宏的工作机制
     宏解析器的工作机制等价的函数签名示意
     #+begin_src rust
       fn macro_parser(
           sess: ParserSession,
           tts: TokenStream,
           ms: &[TokenTree]
       ) -> NamedParseResult
     #+end_src

     - *sess*: 代表解析会话, 用于跟踪一些元数据, 包括错误信息等
     - *tts*: 代表 *词条流* (TokenStream), 是词条序列的抽象表示
     - *ms*: 代表匹配器, 代表一组词条数结构.

     另一方面, ~macro_rules!~ 本身也是一种声明宏, 只不过它由编译器内部所定义. 它
     定义了一种声明宏的通用解析模式, 如下所示:
     #+begin_src rust
       ($lhs: tt) => ($rhs: tt);+
     #+end_src

     也就是说, 当宏解析器碰到 ~macro_rules!~ 定义的声明宏时, 它会使用这个模式来
     解析该声明宏, 将宏定义中 ~=>~ 符左右两侧都解析为 *tt*, 即 *词条树*. 然后,
     宏解析器会将左右两侧的词条树保存起来作为宏调用的匹配器(ms). 结尾的 ~+~ 代表
     该模式可以是一个或多个.

     当宏解析器碰到宏调用时, 首先会将宏调用中的具体参数解析为词条流(tts), 然后在
     之前保存的匹配器(ms)中取左侧的词条树($lhs)来匹配该词条流. 然后通过捕获变量
     ~$arg~ 和 ~$branch~ 替换匹配器(ms)中右侧的词条树($rhs)上相应的代码, 替换后
     的 ~$rhs~ 词条树将生产最终的代码.

     这就是宏解析器展开声明宏的全过程, 整个过程和正则表达式的工作机制类似. 匹配
     器(ms)相当于正则表达式中的模式, 而宏调用参数生产的词条流则相当于正则表达式
     待匹配的字符串. 甚至, 宏定义中规则的模式是可以将正则表达式那种使用元符 ~+~
     或 ~*~ 来指定重复的, 分别代表重复一次或一次以上.

     签名的宏示例中也出现过声明宏内嵌套另外一个声明宏的情况, 宏解析器碰到这样的
     嵌套会继续将其展开, 直到 AST 中再无任何宏调用节点. 但也不是无限制地展开, 编
     译器内设置了一个上限来限定嵌套展开次数, 如果超过该次数还存在宏调用节点, 则
     编译器会报错. 开发者也可以通过指定 ~#![recursion_limit= "..."]~ 属性来修改
     包内允许的嵌套展开次数上限.

     声明宏中可以捕获的类型不仅仅是表达式(expr), 以下是捕获类型列表.

     - *item*: 代表语言项, 就是组成一个 Rust 包的基本单位, eg: 模块、声明、函数
       定义、类型定义、结构体定义、impl 实现等
     - *block*: 代表代码块, 由花括号限定的代码
     - *stmt*: 代表语句, 一般是指以分号结尾的代码
     - *expr*: 指代表达式, 会生成具体的值
     - *pat*: 指代模式
     - *ty*: 表示类型
     - *ident*: 指代标识符
     - *path*: 指代路径, eg: ~foo~, ~std::iter~ 等
     - *meta*: 元信息, 表示包含在 ~#[...]~ 或 ~#![...]~ 属性内的信息
     - *tt*: TokenTree 的缩写, 指代词条树
     - *vis*: 指代可见性, eg: ~pub~
     - *lifetime*: 指代生命周期参数

     在写声明宏规则的时候, 要注意这些捕获类型匹配的范围. eg: ~tt~ 类型, 代表词条
     树, 就比 ~expr~ 能匹配的范围要广, 需要根据具体的情况来选择. 只有了解生命宏
     的规则及其工作机制之后, 才可以毫无障碍地编写声明宏.

**** 声明宏的实现技巧
     声明宏重复匹配格式具体说明:
     - ~$(...)~: 代表要把重复匹配的模式置于其中
     - ~sep~: 代表分隔符, 常用 ~,~, ~;~, ~=>~. 分隔符可依据具体的情况省略
     - ~rep~: 代表控制重复次数的标记, 目前支持两种: ~*~ 和 ~+~, 代表的意义和正则
       表达式中的一致, 分别是 "重复 0 次及以上" 和 "重复一次及以上".
       
     根据这一的规则, 之前的匹配模式就改进为 ~$($key: expr => $value: expr), *~
     中间的分隔符用了逗号, 这是因为每个键值对后面都有一个逗号进行分隔, *宏里的语
     法可以自由设计*. 当前示例中选择使用逗号分隔.

     改进 ~hashmap!~ 宏: 创建的时候根据给定键值对的个数来预分配容量.

     #+begin_src rust
       let _cap = <[()]>::len(&len[(), ()]);
       let mut _map = HashMap::with_capacity(_cap);
     #+end_src

     思路:
     1. 通过匹配输入的键值对, 得到所有的键
     2. 将所有的键通过匹配替换为单元值
     3. 生成最终预期的代码
      
     这里需要匹配 2 次, 意味着可以通过创建 2 个不同的宏来完成需求

     ~@unit~ 和 ~@count~ 相当于是内部宏规则的宏名, 暂且称为 *内部宏*. 内部宏的名
     字 *必须放到真正的匹配规则之前*, 否则编译器会将其当做普通的匹配规则去处理.
     内部宏的名字并非必须用 "@" 符号开头, 它只是一种社区惯用法. 也可以使用
     "unit" 或 "unit!" 命名.

**** 调试宏
     调试宏代码基本有 *两种办法*:

     - 使用编译器命令来输出展开后的代码
     - 在 Nightly 版本下使用 ~#![feature(trace_macros)]~ 属性来跟踪宏展开过程.

       
**** 声明宏的卫生性
     声明宏在展开后, 不会污染原来的词法作用域, 具有这种特性的宏叫 *卫生宏*
     (Hygienic Macro). Rust 的声明宏具有部分卫生性.

     事实上, 声明宏展开以后的代码拥有独立的作用域, 并不会污染当前宏调用的作用域.

     目前 Rust 声明宏的卫生性并不完整, 只有对变量和标签(eg: 循环外部的标签 'out)
     可以保证卫生. 像声明周期、类型等都无法保证卫生性, 所以在写宏的时候, 需要注
     意: 在宏里如果使用非当前作用域内定义的变量, 一定要用绝对路径, 并且这些变量
     必须在使用宏的任何地方都可见. 在宏的卫生性方面, Rust 还在逐渐完善.

**** 导入/导出
     在日常开发中, 经常会将一些常用的宏打包起来方便使用, 从而提高开发效率.

     使用 ~#[macro_export]~ 属性表示其下面的宏定义对其他包也可见, 在 Rust 2018
     中, 使用 ~use~ 即可导入宏

     使用 ~$crate~ 变量可以在该宏定义被导出的时候, 自动根据上下文来选择函数调用
     路径中的包名.

     *注意*: 若一个包中导入多个声明宏包含了重复的命名, 则最后导入的声明宏会覆盖
     先导入的声明宏定义.

**** 使用 macro 关键字
     目前只有在 Nightly 版本的 Rust 之下, 使用 ~#![feature(decl_macro)]~ 属性才
     能使用 macro 关键字.
     
     使用 macro 关键字重新定义宏的代码比 ~macro_rules!~ 定义的宏可读性更高

     在 ~1.50~ 版本的 Rust Nightly 中, 依旧存在此 feature, 不久的将来会稳定发布

*** 过程宏
    使用声明宏可以实现像函数一样被调用的宏, 但是也仅局限于代码自动生成的场景. 对
    于需要语法扩展的场景用声明宏无法满足, eg: 为现有结构体自动生成特定的实现代码,
    或者进行代码检查等. 在过程宏出现之前, 开发者可以通过 Rust 编译器的插件机制来
    满足语法扩展的诸多需求. 但可惜的是, 这些插件机制并未稳定, 暂时只能在 Nightly
    版本的 Rust 中使用 ~#![feature(plugin_register)]~ 这样的 feature 才能实现.

    过程宏的工作机制:
    #+begin_example
                           操作
        librustc_plugin ---------> AST
                |
                | 依
                | 赖             - - - - - - - - - - - - - - - - - - - - -
                |               |         ------- ---------- quote       |
                ↓                         |                    | 
         rustc libsyntax        |         |                    |         |
                ↑                         |                   AST
                | 依            |          |                   ↑         |
                | 赖                       |                   |
                |           操作 |         ↓                   |          |
          libproc_macro ----------->  TokenStream  ------>   syn
                                 |        |                              |
                                 - - - - - - - - - - - - - - - - - - - - -
                                          |
                                          ↓
                                      libsyntax  --------> AST
                                        parser
    #+end_example
    
    官方团队确定的一种方案是 *过程宏(Procedural Macros)*.

    Rust 编译器插件机制由内置的 librustc_plugin 包提供, 它通过直接操作 AST 来
    达成目的. 所以, 它依赖于内置的 libsyntax 包, 包中定义了词法分析、语法分析、
    操作语法树相关的各种操作. 但要稳定发布给开发者, 就不能依赖于 AST 结构.

    所以 Rust 官方团队在 libsyntax 的基础之上, 又抽象出一层通用的接口, 这套接口
    就叫 *过程宏*, 它被定义于内置的 libproc_macro 包中, 过程宏建立在 *词条流*
    (TokenStream) 的基础上, 开发者可以借助于过程宏输入词条流, 对其进行修改或替换,
    最后将修改后的词条流输出, 交给语法解析器(libsyntax 中包含的 parser) 处理.
    
    基于词条流的好处在于未来不管语法如何变化, 都不会影响到过程宏的使用, 因为词法
    分析不需要关心语法信息. 使用过程宏的时候, 可以直接把传入的词法流转为字符串处
    理, 也可以配合另外两个第三方库来使用: *syn* 和 *quote*. 其中 sync 库可以将词
    条流再次解析为 AST 结构, 然后开发者在此结构之上对其进行各种修改或替换, 最后
    通过 quote 库, 将修改后的 AST 结构重新转换为词条流输出, 这样就比直接处理字符
    串要方便、精准.(在上图右侧虚线框内)

    学习 Rust 过程宏系统的时候, 需要了解一个 "变" 与一个 "不变".
    - *变*: Rust 在上升发展期, 还在随时添加各种新的功能以及优化性能, 有可能会影
      响到 AST 结构. 所以会把过程宏、编译器插件、syn、quote 读都独立出来, 以便更
      好地将过程宏机制向开发者稳定发布.
    - *不变*: 过程宏基于词条流, 不会随语法的不断变化而受影响.

    但要明白, "变" 与 "不变" 只是指语言结构层面. eg: libproc_macro 库自身也在进
    化, 现已出现 proc_macro2 库, 它是对 libproc_macro 库的进一步抽象和包装, 更易
    于使用. 但基于词条流来处理过程宏的整体思路依然不变.

    目前, 使用过程宏可以实现三种类型的宏:

    - *自定义派生属性*: 可以自定义类似于 ~#[derive(Debug)]~ 这样的 derive 属性,
      可以自动为结构体或枚举类型进行语法扩展. 在官方 RFC 或一些社区资料中, 过程
      宏也被称为宏 1.1(Macro1.1).
    - *自定义属性*: 可以自定义类似于 ~#[cfg()]~ 这种属性.
    - *Bang 宏*: 和 ~macro_rules!~ 定义的宏类似, 以 Bang 符号(就是叹号 "!")结尾
      的宏. 可以像函数一样被调用. 

**** 自定义派生属性
     *注意*: 使用自定义的派生属性过程宏, 需要用 ~#[macro_use]~ 将其导出

     *注意*: proc_macro 包属于 Rust 自带包, 不需要在 Cargo.toml 中配置依赖. 引入
     路径前的 self 前缀也不可省略.

**** 自定义属性
     派生属性的目的比较单一, 就是为了给结构体或枚举体自动派生各种实现, 而属性的
     用途就相对比较多. 可以说自定义派生属性是自定义属性的特例. Rust 自身有很多内
     置的属性, 比如条件编译属性 ~#[cfg()]~ 和测试属性 ~#[test]~, 早期版本的 Rust
     可以通过编译器插件的方式来实现属性, 但插件的方式并未稳定, 不推荐使用. 过程
     宏实现自定义属性的功能还未稳定. 在该版本稳定之前, 必须在 Nightly 版本下使用
     ~#![feature(custom_attribute)]~ 特性. 从 1.31 开始不需要此特性.

     
**** 编写 Bang 宏
     属性 ~#[proc_macro]~ 表示其下方的函数 ~hashmap~ 是要实现一个 Bang 宏, 该函
     数签名输入和输出参数均为 TokenStream 类型.

     过程宏实现 Bang 宏的思路与 ~macro_rules!~ 宏的思路相似, 都是拼接生成代码.

     其 proc_macro 包中还提供了 ~TokenNode~, ~TokenTree~ 等结构体, 以及可以将这
     些结构转换为 ~TokenStream~ 的 ~quote!~ 宏, 只不过目前该功能尚未完善, 要完成
     当前示例, 使用你起来不如解析字符串来得方便.

**** 使用第三方包 syn 和 quote
     虽然官方的 proc_macro 包功能尚未完善, 但是 Rust 社区提供了方便的包可以使用.
     通过 *syn* 和 *quote* 这两个包和 proc_macro2 的相互配合, 可以方便地处理大部
     分需要用到过程宏的场景, eg: 自定义派生属性. 序列化框架包 serde 就大量使用了
     syn 和 quote, 实际上, 这两个包就是 serde 作者在编写 serde 过程中实现的.

     其中, syn 完整实现了 Rust 源码的语法树结构. 而 quote 可以将 syn 的语法树结
     构转为 ~proc_macro::TokenStream~ 类型. 接下来使用 proc_macro、syn 和 quote
     共同实现一个自定义派生属性功能 derive-new.

     ~syn::DeriveInput~ 结构体源码示意:
     #+begin_src rust
       #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
       pub struct DeriveInput {
           // 实际为 `Vec<syn::Attribute>` 类型, `syn::Attribute` 代表属性
           // eg: `#[repr(C)]`, 使用 `Vec<T>` 代表可以定义多个属性.
           // 用于存储作用域结构体或枚举体属性
           pub attrs: Vec<Attribute>,
           // 为 `syn::Visibility` 类型, 代表结构体或枚举的可见性
           pub vis: Visibility,
           // 为 `syn::Ident` 类型, 将会存储结构体或枚举体的名称
           pub ident: Ident,
           // 为 `syn::Generics`, 用于存储泛型信息
           pub generics: Generics,
           // 为 `syn::Data`, 包括结构体、枚举体和联合体这三种类型
           pub data: Data,
       }
     #+end_src

     DeriveInput 结构体还实现了一个重要的 trait, 如下所示:
     #+begin_src rust
       impl Parse for DeriveInput {
           fn parse(input: ParseStream) -> Result<Self> {
               // ...
           }
       }

       pub trait Parse: Sized {
           fn parse(input: ParseStream) -> Result<Self>;
       }
     #+end_src

     在 syn 0.15 之前, Parse 由 Synom 代替. 从 syn 0.15 开始, Synom 已移除.
     
     ~Parse~ 中定义了 ~parse~ 方法, 其输入参数类型为 ~syn::parse::ParseStream~,
     用于 syn 内部解析 token 的缓冲流, 由 ~TokenStream~ 转换而成.

     可以使用 ~parse_macro_input!~ 宏将任意输入参数转换为实现了 Parse 的类型. 在
     本例中是 ~DeriveInput~ 结构体.
     *注意*: 该宏使用的是固定格式的宏语法: ~parse_macro_input!(输入参数 as 目标
     类型)~, 其中 ~as~ 后面必须指定明确的类型.

     除了使用 ~parse_macro_input!~ 宏, 其实也可以直接调用 ~syn::parse()~ 函数来
     解析输入参数 input. ~syn::parse()~ 函数来解析输入参数 input. ~syn::parse()~
     函数可以将输入的词法流都解析为指定的数据结构, 也就是 AST.
     
     ~syn::parse()~ 函数签名示意
     #+begin_src rust
       pub fn parse<T: Parse>(&self) -> Result<T>
     #+end_src

     该函数内部会调用 ~T::parse()~ 方法. 所以 ~parse()~ 在解析 input 参数, 并将
     其声明为 ~syn::DeriveInput~ 类型时, 就可以调用 ~syn::DeriveInput~ 中实现的
     ~parse()~ 方法, 最终生成 ~syn::DeriveInput~ 类型实例.

     syn 包主要是通过覆盖了 *全部 Rust 语法结构的自定义 AST 结构、~syn::Parse~
     和 ~parse_macro_input!~ / ~syn::parse()~ 这三大要素*, 满足开发者方便地将传
     入的 ~TokenStream~ 类型的词条流转化为指定的 syn AST. 另外, syn 还提供了功能
     强大的 ~Token![...]~ 宏, 用于实现自定义的 AST.

     syn 三大要素示意:
     #+begin_example





                                  impl Parse && Token![_ident]                  struct && impl Parse
                                        Custom AST                                  syn::File
                                             |        
                                             |                                    enum && impl Parse
                                             |                                      syn::Item
       parse_macro_input!                    |
         (input as T)       T:parse        trait                                  struct && impl Parse
             OR          ------------->  syn::Parse  ---------------------------->  syn::DeriveInput
          syn::parse<T>                   fn parse
                                                                                  enum && impl Parse
                                                                                    syn::Expr

                                                                                  enum && impl Parse
                                                                                    syn::Type
     #+end_example

     在 Rust 中, 一种有三种结构体, 那么 ~new_for_struct()~ 函数就必须同时满足这
     三种结构体.

     ~syn::punctuated::Punctuated<T, P>~ 类型结构用于存储由标点符号分隔的语法树
     节点序列, 常用的如下:
     - ~Punctuated<Field, Token![,]>~: 用逗号分隔的结构体字段序列
     - ~Punctuated<PathSegment, Token![::]>~: 用双冒号分隔的路径序列
     - ~Punctuated<TypeParamBound, Token![+]>~: 泛型参数序列
     - ~Punctuated<Expr, Token[,]>~: 函数调用参数
       
     *补充*: 调试宏可以使用 [[https://github.com/dtolnay/cargo-expand][cargo-expand]] 包查看宏展开结果.
     
     TODO: 改进 ~#[derive(New)]~ 属性, 支持 ~#[new(value=xxx)]~ 为字段指定默认值,
     需要用 ~[proc_macro_derive(New, attributes(new))]~ 宏, 然后在对应的 derive
     函数中处理 attributes 的信息.

** 编译器插件
   Rust 最强大的元编程工具非编译器插件莫属, 但可惜的是, 编译器插件目前还不太稳定.
   在 Nightly 版本的 Rust 之下, 配合 ~#![feature(plugin_register)]~ 特性, 可以实
   现编译器插件.

   编译器插件由内置的 *librustc_plugin* 包提供, 该包对外公开了 8 种方法供开发者
   编写不同功能的编译器插件. 具体如下:

   - register_syntax_extension: 可以通过它实现任意语法扩展
   - *register_custom_derive*: 是对 register_syntax_extension 的包装, 专门用于实
     现自定义派生属性
   - *register_macro*: 同样是对 register_syntax_extension 的包装, 用于实现 Bang
     宏
   - register_attribute: 用于实现编译器属性

   *其他 4 种与 lint 属性和 llvm 相关*

   *MacEager* 是一个枚举体, 它定义 Rust 的语法结构作为枚举值, 包括如下:
   - 表达式(expr)
   - 模式(pat)
   - 语言项(items)
   - 实现项(impl_items)
   - 语句(stmts)
   - 类型(ty)

   *注意*: 该自定义编译器插件示例在不同版本的 Rust 下可能无法编译(Rust
   1.50-Nightly 无法编译). 因为 Rust 内部的 libsyntax 包是不断变化的.

   通过此例可以看出, 编写编译器插件和编写过程宏整体流程很相似, 但是在细节上有差
   距, 前者直接依赖 AST 结构, 而后者只是依赖 TokenStream 词法结构. 从语言功能稳
   定的角度看, 过程宏要优于编译器插件, 也属于宏 2.0 稳定发布的计划内容. 另外, 过
   程宏的文档比较全, 而编译器插件的文档很少, 开发者只能从源码中获取信息. 所以,
   作为开发者, 应该 *优先选择过程宏*, 而非片一起插件, 除非过程宏无法达成目的.
