* 语言精要
** Rust 语言的基本构成
   Rust 语言主要由以下几个核心部件组成:
   - 语言规范
   - 编译器
   - 核心库
   - 标准库
   - 包管理器

*** 语言规范
    Rust 语言规范主要由 Rust 语言参考(The Rust Reference) 和 RFC 文档共同构成
    
**** Rust 语言参考
     Rust 语言参考是官方团队维护的一份参考文档, 包含了三类内容:

     - 对每种语言结构及其用法的描述
     - 对内存模型, 并发模型, 链接, 调试等内存的描述
     - 影响语言设计的基本原理和参考

     该参考文档不算 Rust 语言的正式规范, 但目前官方只有这么一份最接近规范的文档,
     在不就得将来, Rust 官方会出一份正式的文档.  

**** RFC 文档
     Rust 引入了 规范化的 RFC 流程, RFC 文档是涵盖了语言特性的设计意图, 详细设计,
     优缺点的完成技术方案. 社区中的每个人都可以提 RFC, 经过社区讨论, 核心开发团
     队评审, 通过之后才能进入具体实现阶段.

     Rust 源码中也规范德使用了 RFC 编号, 来对应相应的功能特性. 使用 RFC 的好处是,
     形成了规范化的文档, 利于方案实施和后期维护, 利于核心开发组主导项目进展方向.
     Rust 学习者也可以通过 RFC 来深入了解某个语言特性的来龙去脉.

*** 编译器
    Rust 是一门静态编译型语言. Rust 官方的编译器叫 *rustc*, 负责将 Rust 源代码编
    译为可执行文件或其他库文件(.a, .so, .lib, .dll 等).

    rustc 有如下特点:
    - rustc 是跨平台的应用程序, 支持 UNIX/Linux 等 UNIX 平台, 也支持 Windows 平
      台.
    - rustc 支持交叉编译, 可以在当前平台下输出可运行于其他平台上的应用程序和库.
    - rustc 使用 LLVM 作为编译器后端, 具有很好的代码生成和优化技术, 支持多个目标
      平台
    - rustc 是用 Rust 语言开发的, 包含在 Rust 语言源码中
    - rustc 对 Rust 源码进行词法语法分析, 静态类型检查, 最终将代码翻译为 LLVM IR.
    - rustc 输出的错误信息非常友好和详尽, 是开发者的良师益友.

*** 核心库
    Rust 语言的语法由核心库和标准库共同提供. 其中 Rust 核心库是标准库的基础. 核
    心库中定义的是 Rust 语言的核心, 不依赖于操作系统和网络相关的库, 甚至不知道堆
    分配, 也不提供并发和 I/O.

    可以通过在模块顶部引入 ~#![no_std]~ 来使用核心库. 核心库和标准库的功能有一些
    重复, 包括如下部分:

    - 基础的 trait, 如 Copy, Debug, Display, Option 等
    - 基本原始类型, 如 bool, char, i8/u8, i16/u16, i32/u32, i64/u64,
      isize/usize, f32/f64, str, array, slice, tuple, pointer 等
    - 常用功能型数据类型, 满足常见的功能性需求, 如 String, Vec, HashMap, Rc,
      Arc, Box 等
    - 常用的宏定义, 如 println!, assert!, panic!, vec! 等

    做嵌入式应用开发的时候, 核心库是必须的

*** 标准库
    Rust 标准库提供应用程序开发所需要的基础和跨平台支持. 标准库包含的内容大概如
    下:

    - 与核心库一样的基本 trait, 原始数据类型, 功能型数据类型和常用宏等, 以及与核
      心库几乎完全一致的 API.
    - 并发, I/O 运行时. eg: 线程模块, 用于消息传递的通道类型, Sync trait 等并发
      模块, 文件, TCP, UDP, 关到, 套接字等常见 I/O.
    - 平台抽象. os 模块提供了许多与操作系统环境交互的基本功能, 包括程序参数, 环
      境变量和目录导航; 路径模块很赚了处理文件路径的平台特定规则.
    - 底层操作接口, eg: ~std::mem~, ~std::ptr~, ~std::intrinsics~ 等, 操作内存,
      指针, 调用编译器固有函数.
    - 可选和错误处理类型 Option 和 Result, 以及各种迭代器等.

*** 包管理器
    把按一定规则组织的多个 rs 文件变异后就得到一个 *包(crate)*. 包是 Rust 代码的
    基本编译单元, 也是程序员之间共享代码的基本单元.

    Rust 社区的公开电饭煲都集中在 crates.io 网站上面, 它们的文档被自动发布到
    docs.rs 网站上.
