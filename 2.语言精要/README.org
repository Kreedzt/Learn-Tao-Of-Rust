* 语言精要
** Rust 语言的基本构成
   Rust 语言主要由以下几个核心部件组成:
   - 语言规范
   - 编译器
   - 核心库
   - 标准库
   - 包管理器

*** 语言规范
    Rust 语言规范主要由 Rust 语言参考(The Rust Reference) 和 RFC 文档共同构成
    
**** Rust 语言参考
     Rust 语言参考是官方团队维护的一份参考文档, 包含了三类内容:

     - 对每种语言结构及其用法的描述
     - 对内存模型, 并发模型, 链接, 调试等内存的描述
     - 影响语言设计的基本原理和参考

     该参考文档不算 Rust 语言的正式规范, 但目前官方只有这么一份最接近规范的文档,
     在不就得将来, Rust 官方会出一份正式的文档.  

**** RFC 文档
     Rust 引入了 规范化的 RFC 流程, RFC 文档是涵盖了语言特性的设计意图, 详细设计,
     优缺点的完成技术方案. 社区中的每个人都可以提 RFC, 经过社区讨论, 核心开发团
     队评审, 通过之后才能进入具体实现阶段.

     Rust 源码中也规范德使用了 RFC 编号, 来对应相应的功能特性. 使用 RFC 的好处是,
     形成了规范化的文档, 利于方案实施和后期维护, 利于核心开发组主导项目进展方向.
     Rust 学习者也可以通过 RFC 来深入了解某个语言特性的来龙去脉.

*** 编译器
    Rust 是一门静态编译型语言. Rust 官方的编译器叫 *rustc*, 负责将 Rust 源代码编
    译为可执行文件或其他库文件(.a, .so, .lib, .dll 等).

    rustc 有如下特点:
    - rustc 是跨平台的应用程序, 支持 UNIX/Linux 等 UNIX 平台, 也支持 Windows 平
      台.
    - rustc 支持交叉编译, 可以在当前平台下输出可运行于其他平台上的应用程序和库.
    - rustc 使用 LLVM 作为编译器后端, 具有很好的代码生成和优化技术, 支持多个目标
      平台
    - rustc 是用 Rust 语言开发的, 包含在 Rust 语言源码中
    - rustc 对 Rust 源码进行词法语法分析, 静态类型检查, 最终将代码翻译为 LLVM IR.
    - rustc 输出的错误信息非常友好和详尽, 是开发者的良师益友.

*** 核心库
    Rust 语言的语法由核心库和标准库共同提供. 其中 Rust 核心库是标准库的基础. 核
    心库中定义的是 Rust 语言的核心, 不依赖于操作系统和网络相关的库, 甚至不知道堆
    分配, 也不提供并发和 I/O.

    可以通过在模块顶部引入 ~#![no_std]~ 来使用核心库. 核心库和标准库的功能有一些
    重复, 包括如下部分:

    - 基础的 trait, 如 Copy, Debug, Display, Option 等
    - 基本原始类型, 如 bool, char, i8/u8, i16/u16, i32/u32, i64/u64,
      isize/usize, f32/f64, str, array, slice, tuple, pointer 等
    - 常用功能型数据类型, 满足常见的功能性需求, 如 String, Vec, HashMap, Rc,
      Arc, Box 等
    - 常用的宏定义, 如 println!, assert!, panic!, vec! 等

    做嵌入式应用开发的时候, 核心库是必须的

*** 标准库
    Rust 标准库提供应用程序开发所需要的基础和跨平台支持. 标准库包含的内容大概如
    下:

    - 与核心库一样的基本 trait, 原始数据类型, 功能型数据类型和常用宏等, 以及与核
      心库几乎完全一致的 API.
    - 并发, I/O 运行时. eg: 线程模块, 用于消息传递的通道类型, Sync trait 等并发
      模块, 文件, TCP, UDP, 关到, 套接字等常见 I/O.
    - 平台抽象. os 模块提供了许多与操作系统环境交互的基本功能, 包括程序参数, 环
      境变量和目录导航; 路径模块很赚了处理文件路径的平台特定规则.
    - 底层操作接口, eg: ~std::mem~, ~std::ptr~, ~std::intrinsics~ 等, 操作内存,
      指针, 调用编译器固有函数.
    - 可选和错误处理类型 Option 和 Result, 以及各种迭代器等.

*** 包管理器
    把按一定规则组织的多个 rs 文件变异后就得到一个 *包(crate)*. 包是 Rust 代码的
    基本编译单元, 也是程序员之间共享代码的基本单元.

    Rust 社区的公开电饭煲都集中在 crates.io 网站上面, 它们的文档被自动发布到
    docs.rs 网站上.

** 语句与表达式
   Rust 中的语法可以分成两大类: *语句(Statement)* 和 *表达式(Expression)*. 语句
   是指要执行的一些操作和产生副作用的表达式. 表达式主要用于计算求值.

   语句又分两种: *声明语句(Declaration statement)* 和 *表达式语句(Expression
   statement)*.
   
   - 声明语句: 用于声明各种语言项(item), 包括生命变量, 今天变量, 常量, 结构体,
     函数等, 以及通过 extern 和 use 关键字引入包和模块等.
   - 表达式语句, 特指以分号结尾的表达式. 此类表达式求值结果将被舍弃, 并总是返回
     单元类型().

     #+begin_src rust
       // extern crate std;
       // use std::prelude::v1::*;

       fn main() {
           pub fn answer() -> () {
               let a = 40;
               let b = 2;
               assert_eq!(sum(a, b), 42);
           }

           pub fn sum(a: i32, b: i32) -> i32 {
               a + b
           }

           answer();
       }
     #+end_src
     第 1 和第 2 行为声明语句, 它们并不需要求值, 只是用来引入标准包及模块. 这里
     注释掉是因为 Rust 会为每个 crate 都自动引入标准库模块, 除非使用 ~#[no_std]~
     属性明确指定了不需要标准库.

     然后使用 fn 关键字定义了 2 个函数 answer 和 sum. 关键字 fn 是 function 的缩
     写.

     函数 answer 没有输入参数, 并且返回值为 *单元类型()*. 单元类型拥有唯一的值,
     就是它本身, 为了描述方便, 将该值称为 *单元值*. 单元类型的概念来自 OCmal, 它
     表示 [没有什么特殊的价值]. 所以, 这里将单元类型作为函数返回值, 就表示该函数
     无返回值. 当然, 通常无返回值的函数默认不需要在函数签名中指定返回类型.

     在函数 answer 中, 使用 let 声明了 2 个变量 a, b, 其后必须加分号.
     ~assert_eq!~ 则是宏语句, 它是 Rust 提供的断言, 允许判断给定的两个表达式求值
     结果是否相同. 以叹号结尾, 并且可以像函数一样被调用的语句, 在 Rust 中叫做 *
     宏*.

     Rust 编译器在解析代码的时候, 如果碰到 *分号, 就会继续往后面执行;* 如果碰到
     语句, 则 *执行语句*; 如果碰到表达式, 则会 *对表达式求值*, 如果分号后面什么
     都没有, *就会补上单元值()*.

     当遇到函数的时候, 会将函数体的花括号识别为 *块表达式(Block Expression)*. 块
     表达式是由一对花括号和一系列表达式组成的, 它 *总是返回块中最后一个表达式的
     值*. 

     从这个角度来看, 可以将 Rust 看作一切皆表达式. 由于当分号后面什么都没有时自
     动补单元值() 的特点, 我们可以将 Rust 中的语句看作计算结果均为 () 的特殊表达
     式. 而对于普通的表达式来说, 则会得到正常的求值结果.
** 变量与绑定
   通过 let 关键字来创建变量, 这是 Rust 语言从函数式语言中借鉴的语法形式. let 创
   建的变量一般称为 *绑定(Binding)*, 它表明了标识符(Identifier) 和值(Value) 之间
   建立的一种关联关系.

*** 位置表达式和值表达式
    Rust 中的表达式一般可以分为 *位置表达式(Place Expression)* 和 *值表达式
    (Value Expression)*. 在其他语言中, 一般叫做左值(LValue) 和 右值(RValue).

    顾名思义, 位置表达式就是表示内存位置的表达式. 分别有以下几类:
    - 本地变量
    - 静态变量
    - 解引用 (*expr)
    - 数组索引
    - 字段引用(expr.field)
    - 位置表达式组合

    通过位置表达式可以对某个数据单元的内存进行读写. 主要是进行写操作, 这也是位置
    表达式可以被赋值的原因.

    除此之外的表达式就是值表达式. 值表达式一般只引用了某个存储单元地址中的数据.它
    相当于数据值, 只能进行读操作.

    *从语义角度来说, 位置表达式代表了持久性数据, 值表达式代表了临时数据*. 位置表
    达式一般有持久的状态, 值表达式要么是字面量, 要么是值表达式过程中创建的临时值.

    表达式的求值过程在不同的上下文中会有不同的结果. 求值上下文也分为 *位置上下
    文* (Place Context) 和 *值上下文(Value Context)*. 下面几种表达式属于位置上下
    文:

    - 赋值或者复合赋值语句左侧的操作数.
    - 一元引用表达式的独立操作数
    - 包含隐式借用(引用)的操作数
    - match 判别式或 let 绑定右侧在使用 ref 模式匹配的时候也是位置上下文.

    除了上述几种情况, 其余表达式都属于值上下文. *值表达式不能出现在位置上下文中*.
    #+begin_src rust
      pub fn temp() -> i32 {
          return 1;
      }

      fn main() {
          let x = &temp();
          // error[E0070]: invalid left-hand side expression
          temp() = *x;
      }
    #+end_src

    temp 函数调用是一个无效的位置表达式, 它是值表达式.

*** 不可变绑定与可变绑定
    使用 let 关键字声明的位置表达式 *默认不可变, 为不可变绑定*.
    
    从语义上来说, let 默认声明的不可变绑定只能对相应的存储单元进行读取, 而 let
    mut 声明的可变绑定则是可以对象相应的存储单元进行写入的.

*** 所有权与引用
    当位置表达式出现在值上下文中时, 该位置变道时将会把内存地址转移给另外一个位置
    表达式, 这其实是所有权的转移.

    在日常开发中, 有使用并不需要转移所有权. Rust 提供 *引用操作符(&)*, 可以直接
    获取表达式的存储单元地址, 即内存位置.

*** 值表达式在位置上下文中求值时会被创建临时值
    编译器为 ~let e = &42~ 创建临时值的示意代码:
    #+begin_src rust
      let mut _0: &i32;
      let mut _1: i32;
      _1 = const 42i32;
      _0 = &1;
    #+end_src

    从语义上来说, 不管是 ~&a~ 还是 ~&mut c~, 都相当于对 a 和 c 所有权的借用, 因
    为 a 和 c 还 *依旧保留它们的所有权*, 所以引用也被称为借用.

** 函数与闭包
   *main 函数*: 代表程序的入口. 对于二进制可执行文件来说, main 函数必不可少. 对
   于库函数来说, main 函数就没那么重要了

*** 函数定义
    函数是通过关键字 *fn* 定义的.

*** 作用域与生命周期
    *Rust 语言的作用域是静态作用域, 即此法作用域(Lexical Scope)*. 由一对花括号来
    开辟作用域, 其作用域在此法分析阶段就已经确定了, 不会动态改变.

    连续使用 let 定义同名变量的做法叫 *变量遮蔽(Varaible Shadow)*. 但是最终的变
    量的值由新定义所决定.

    在词法作用域内部使用花括号开辟新的词法作用域后, 两个作用域是相互独立的. 在不
    同的词法作用域内声明的变量绑定, 拥有不同的 *生命周期(LifeTime)*. 尽管如此,
    变量绑定的生命周期总是遵循这样的规律: *从使用 let 声明创建变量绑定开始*, *到
    超出词法作用域的范围时结束*.

*** 函数指针
    在 Rust 中, *函数为一等公民*. 这意味着, 函数自身就可以作为函数的参数和返回值
    使用.

    形如 ~fn(i32, i32) -> i32~ 类型在 Rust 中是 *函数指针(fn pointer)* 类型

*** CTFE 机制
    Rust 编译器也可以像 C++ 或者 D 语言那样, 拥有 *编译时函数执行* (Compile-Time
    Function Execution, CTFE) 的能力. 在 Rust 2018 版本的首个语义化版本 1.30 中,
    CTFE 的一个最小化子集已经稳定了.

    Rust 中固定长度的数组必须在编译期就知道长度, 否则编译出错. 使用 ~const fn~
    定义的函数, 必须可以确定值, 不能存在歧义, ~const fn~ 函数可以强制编译器在编
    译期执行函数. 其中关键字 ~const~ 一般用于定义全局常量.

    *Rust 中的 CTFE 是由 miri 来执行的*. miri 是一个 MIR 解释器, 目前已经被集成
    到了 Rust 编译器 rustc 中. Rust 编译器目前可以支持的常量表达式有: 字面量, 元
    组, 数组, 字段结构体, 枚举, 只包含单行代码的块表达式, 范围等. Rust 想要拥有
    完善的 CTFE 支持, 还有很多工作要做

*** 闭包
    闭包也叫匿名函数. 闭包有以下几个特点:
    - 可以像函数一样被调用.
    - 可以捕获上下文环境中的自由变量
    - 可以自动推断输入和返回的类型.

    闭包调用和函数调用非常像, 但是闭包和函数有一个重要的区别, 那就是 *闭包可以捕
    获外部变量, 而函数不可以*. 

    闭包也可以作为函数参数和返回值.

    *Rust 中闭包实际上就是由一个匿名结构体和 trait 来组合实现的*. 所以, 在 main
    函数调用 math 函数的时候, 分别传入 ~|| a + b~ 和 ~|| a * b~ 这两个闭包, 都实
    现了 ~Fn() -> i32~. 在 math 函数内部, 通过在后面添加一对圆括号来调用传入的闭
    包.

    一般情况下, *闭包默认会按引用捕获变量*. 如果将此闭包返回, 则引用也会跟着返回,
    但是在整个函数调用完毕之后, 函数内的本地变量 i 就会被销毁. 那么随闭包返回的
    变量 i 的引用, 也将成为悬垂指针. Rust 是注重内存安全的语言, 绝对不允许, 编译
    器会报错. 使用 move 将捕获变量 i 的所有权转移到闭包中, 就不会按引用进行捕获
    变量, 这样闭包才可以安全地返回.

    
** 流程控制
   一般编程语言都会有场景的流程控制语句: 条件语句和循环语句. 在 Rust 中叫 *流程
   控制表达式*.

*** 条件表达式
    表达式一定会有值, 所以 if 表达式的分支 *必须返回一个同类型的值*.
    这也是 Rust 没有三元操作符 ~? :~ 的原因. if 表达式的求值规则和块表达式一致.

*** 循环表达式
    Rust 编译器在对 while 循环做 *流分析(Flow Sensitive)* 的时候, 不会检查循环条
    件, 编译器会认为 while 循环条件可真可假, 所以循环体里的表达式也会被忽略, 此
    时编译器只知道 while true 返回的是单元值, 而函数返回的是 i32, 其他情况一概不
    知. 这一切都是因为 CTFE 功能的限制, while 条件表达式无法作为编译器常量来使用.
    只有等将来 CTFE 功能完善了, 才可以正常使用. 同理, if true 在只有一条分支的情
    况下, 也会发生类似情况.

*** match 表达式与模式匹配
    在 Rust 语言中, match 使用了 *模式匹配(Pattern Matching)* 技术. 模式匹配在数
    据结构字符串中经常出现, 比如在某个字符串中找出与该子串相同的所有子串. 在编程
    语言中, 模式匹配用于判断类型或值是否存在可以匹配的模式. 模式匹配在很多函数式
    语言中已经被广泛应用.

    在 Rust 语言中, match 分支 *左边就是模式*, *右边就是执行代码*. 模式匹配同时
    也是一个表达式, 和 if 表达式类似, 所有分支必须返回同一个类型. 但是左侧的模式
    可以是不同的.

    使用操作符 ~@~ 可以将模式中的值绑定给一个变量, 供右侧的代码使用, *这类匹配叫
    绑定模式(Binding Mode)*. match 表达式 *必须穷尽每一种可能*, 所以一般情况下,
    会使用通配符 ~_~ 来处理剩余的情况.

    除了 match 表达式, let 绑定, 函数参数, for 循环等位置都用到了模式匹配.

*** if let 和 while let 表达式
    if let 表达式和 match 表达式相似, if let 左侧为模式, 右侧为要匹配的值.

    在使用循环的某些场合下, 也可以使用 while let 来简化代码. 与 if let 类似, 其
    左侧为匹配模式, 会匹配右侧结果, 若不符合跳出循环

** 基本数据类型
*** 布尔类型
    Rust 内置了布尔类型, 类型名为 bool. bool 类型只有 2 个值: true 和 false.

    任意一个比较操作都会产生 bool 类型.

    也可以通过 ~as~ 运算符将 bool 类型转换为数字 0 和 1.

    *注意*: Rust 并 *不支持将数字类型转换为 bool 类型*
    
*** 基本数字类型
    Rust 提供的基本数字类型大致可以分为三类: 固定大小的类型, 动态大小的类型和浮
    点数, 分别介绍如下:

    - 固定大小的类型包括无符号整数(Unisigned Integer) 和符号整数(Signed
      Integer). 其中, 无符号整数包括:
      + u8: 数值范围为 0~2^(8-1), 占用一个字节, u8 类型通常在 Rust 中表示字节序
        列. 在文件 I/O 或网络 I/O 中读取数据流时需要使用 u8.
      + u16: 数值范围为 0~2^(16-1), 占用 2 个字节.
      + u32: 数值范围为 0~2^(32-1), 占用 4 个字节
      + u64: 数值范围为 0~2^(64-1), 占用 8 个字节
      + u128: 数值范围为 0~2^(128-1), 占用 16 个字节

      符号整数包括:
      + i8: 数值范围为 -2^7~2^(7-1), 占用 1 个字节
      + i16: 数值范围为 -2^15~2^(15-1), 占用 2 个字节
      + i32: 数值范围为 -2^31~2^(31-1), 占用 8 个字节
      + i128: 数值范围为 -2&127~2^(127-1), 占用 16 个字节

    - 动态大小类型分为:
      + usize: 数值范围为 0~2^(32-1) 或 0~2^(64-1), 占用 4 个或 8 个字节, 具体取
        决于机器的字长
      + isize: 数值范围为 -2^31~2^(31-1) 或 -2^63~2^(63-1), 占用 4 个或 8 个字节,
        同样取决于机器的字长.

    - 浮点数类型分为:
      + f32: 单精度 32 位浮点数, 至少 6 位有效数字, 数值范围为 -3.4x10^38~3.4x10^38
      + f64: 单精度 64 位浮点数, 至少 15 位有效数字, 数值范围为 -1.8x10^308~1.8x10^308

    创建是数字字面量后面可以直接使用 *类型后缀*, eg: ~42u32~, 代表这是一个 ~u32~
    类型, 如果不加后缀或没有指定类型, Rust 编译器会 *默认推断* 数字为 ~i32~ 类型

    可以使用前缀 ~0x~, ~0o~ 和 ~0b~ 分别表示十六进制, 八进制和二进制.

    Rust 中也可以写 *字节字面量*, eg: ~b'*'~, 实际等价于 ~42u8~.

    浮点数同样也可以为字面量假类型后缀. 如果不加后缀或没有指定类型, Rust 会默认
    推断浮点数为 ~f64~ 类型. 标准库 std::f32 和 std::f64 都提供了 IEEE 所需的特
    殊常量值, eg: INFINITY(无穷大), NEG_INFINITY(负无穷大), NAN(非数字值),
    MIN(最小有限值) 和 MAX(最大有限值).

*** 字符类型
    在 Rust 中, 使用 *单引号* 来定义字符(Char) 类型. 字符类型代表的是一个
    *Unicode 标量值*, 每个字符占 4 个字节.

    字符也可以使用 ASCII码和 Unicode 码来定义.

    同样, 可以使用 as 操作符将字符转为数字类型, 可能高位被截断.

*** 数组类型
    数组(Array) 是 Rust 内建的原始集合类型, 数组的特点如下:
    - 数组大小固定
    - 元素均为同类型
    - 默认不可变

    *数组的类型签名为[T;N]*. T 是一个泛型标记, 代表数组元素的某个具体类型. N 代
    表数组的长度, 是一个编译时常量, *必须在编译时确定其值*.

    即使是通过 ~let mut~ 关键字定义的数组, 也只能修改已存在于索引上的元素, 不允
    许对齐添加或删除元素.

    可以通过 ~[0;10]~ 这样的语法创建初始值为 0 且指定长度为 10 的数组. 对于越界
    访问的情况, Rust 会报编译错误, 有效阻止了内存不安全的操作.

    对于原始固定长度数组, 只有实现 ~Copy trait~ 的类型才能作为其元素, 也就是说,
    只有可以在 *栈* 上存放的元素才可以存放在该类型的数组中. 不过, 在不远的将来,
    Rust 还将支持 *VLA(variable-length array)* 数组, 即 *可变长数组*. 对于可变长
    度数组, 将会基于可以在栈上动态分配内存的函数来实现. 在本书写作时, 支持该功能
    的 Unsized Rvalues 特性已经被实现了一小部分.

*** 范围类型
    Rust 内置了 *范围(Range)* 类型, 包括 *左闭右开* 和 *全闭* 两种区间.

    (1..5) 表示左闭右开区间, 是 ~std::ops::Range~ 的实例
    (1..=5) 表示全闭区间, 是 ~std::ops::RangeInclusive~ 的实例

    范围自带了一些方法, eg: sum, 可以为范围中的元素进行求和. 并且每个范围都是一
    个迭代器, 可以直接使用 for 循环进行打印.

*** 切片类型
    切片(Slice) 类型是对一个数组(包括固定大小数组和动态数组)的引用片段, 有利于安
    全有效地访问数组的一部分, 而不需要拷贝. 因为理论上讲, 切片引用的是已经存在的
    变量. 在底层, 切片代表一个指向数组起始位置的指针和数组长度. 用 ~[T]~ 类型表
    示连续序列, 那么切片类型就是 ~&[T]~ 和 ~&mut [T]~.

    通过引用操作符 ~&~ 对数组进行引用, 就产生了一个切片 ~&arr~. 也可以结合范围对
    数组进行切割, eg: ~&arr[1..]~, 表示获取 arr 数组中在索引位置 1 之后的所有元
    素.

    切片也提供了 2 个 ~const fn~ 方法, ~len~ 和 ~is_empty~, 分别用来得到切片的长
    度和判断切片是否为空.

    切片也提供了两个 ~const fn~ 方法, ~len~ 和 ~is_empty~, 分别用来得到切片的长
    度和判断切片是否为空.

    通过 ~&mut~ 可以定义可变切片, 这样可以直接通过索引来修改相应位置的值.

    对于使用 ~vec!~ 定义的数组, 也可以通过引用操作符来得到一个切片.

*** str 字符串类型
    Rust 提供了原始的字符串类型 ~str~, 也叫作 *字符串切片*. 它通常以不可变借用的
    形式存在, 即 ~&str~. *出于内存安全的考虑, Rust 将字符串分为两种类型*, 一种是
    固定长度字符串, 不可随便更改其长度, 就是 ~str~ 字符串; 另一种是可增长字符串,
    可以随意改变其长度, 就是 ~String~ 字符串.

    本质上, 字符串字面量也属于 str 类型, 只不过它是 *静态生命周期字符串*
    ~&'static str~. 所谓静态生命周期, 可以理解为该类型字符串和程序代码一样是持续
    有效的.

    ~str~ 字符串由 2 部分组成: 指向字符串序列的指针和记录长度的值. 可以通过
    ~str~ 模块提供的 ~as_ptr~ 和 ~len~ 方法分别求得指针和长度.

    Rust 中的字符串本质上是一段有效的 UTF8 字节序列. 所以, 可以将一段字节序列转
    换为 ~str~ 字符串. 通过调用 ~std::slice::from_raw_parts~ 函数传入指针和长度,
    可以将相应的字节序列转换为切片类型 ~&[u8]~. 然后再使用 ~std::str::from_utf8~
    函数将得到的切片转换为 ~std~ 字符串. 因为整个过程并没有验证字节序列是否为合
    法的 UTF8 字符串, 所以需要放到 *unsafe* 块执行整个转换过程. 如果开发者看到
    ~unsafe~ 块, 就意味着 Rust 编译器将内存安全交给开发者自行负责了. 

*** 原生指针
    我们将可以表示内存地址的类型称为 *指针*. Rust 提供了多种类型的指针. 包括: 引
    用(reference), 原生指针(Raw Pointer), 函数指针(fn Pointer) 和智能指针(Smart
    Pointer).

    引用本质上是一种 *非空指针*. Rust 可以划分为 *Safe Rust* 和 *Unsafe Rust* 2
    部分, 引用主要应用于 Safe Rust 中. 在 Safe Rust 中, 编译器会对引用进行借用检
    查, 以保证内存安全和类型安全.

    原生指针主要用于 Unsafe Rust 中. 直接使用原生指针是不安全的, 比如原生指针可
    能指向一个 Null, 或者已经已经被释放的内存区域, 因为使用原生指针的地方不在
    Safe Rust 的可控范围内, 所以需要程序员自己保证安全. Rust 支持两种原生指针:
    不可变原生指针 ~*const T~ 和可变性原生指针 ~*mut T~.

    可以通过 ~as~ 操作符将 ~&mut x~ 可变引用转换为 ~*mut i32~ 可变原生指针.

*** never 类型
    Rust 中提供了一种特殊数据类型, never 类型, 即 ~!~. *该类型用于标识永远不可能
    有返回值的计算类型*, 比如线程退出的时候, 就不可能有返回值. Rust 是一个类型安
    全的语言, 所以也需要将这种情况纳入类型系统中进行统一管理.

** 复合数据类型
   Rust 提供了 4 种符合数据类型
   - *元组* (Tuple)
   - *结构体* (Struct)
   - *枚举体* (Enum)
   - *联合体* (Union)

   这 4 种数据类型都是异构数据结构, 意味着可以使用它们将多种类型构建为统一的数据
   类型. 联合体将在第 7 章介绍.

*** 元组
    元组(Tuple) 是一种异构有限序列, 形如(T, U, M, N). 所谓异构, 就是指元组内的元
    素可以是不同类型的; 所谓有限, 是指元组有固定的长度.
    
    可以通过 *索引* 来获取元组内元素的值.

    *因为 let 支持模式匹配, 所以可以用来解构元组*

    当元组中只有一个值的时候, *需要加逗号*, 即 ~(0,)~, 这是为了和括号中的其他值
    进行区分, 其他值形如 ~(0)~. 前面的函数部分降到的单元类型就是一个空元祖 ~()~.

*** 结构体
    Rust 提供三种结构体:
    - 具名结构体 (Named-Field Struct)
    - 元组结构体 (Tuple-Like Struct)
    - 单元结构体 (Unit-Like Struct)

**** 具名结构体
     结构体名要遵从 *驼峰式命名* 规则, 非该规则编译器会发出警告.

     ~#[derive(Debug, PartialEq)]~ 是属性, 可以让结构体自动实现 Debug trait 和
     PartialEq trait, 它们的功能是允许对结构体实例进行打印和比较.

     在 Rust 中, 函数和方法是有区别的. 如果不是在 impl 块定义的函数, 就是 *自由函
     数*. 而 *在 impl 块中定义的函数被称为方法*, 这和面向对象有点渊源.

     name 和 gender 函数的定义中有一个参数 ~&self~, 它代表一个对结构体实例自身的
     引用, 这样方便我们使用远点记号来调用结构体实例中定义的相关函数.

     *Rust 具名结构体是面向对象思想的一种体现*.

**** 元组结构体
     Rust 的 *元组结构体* 看起来像元组和具名结构体的混合体. 特点是: 字段 *没有名
     称*, 只有 *类型*.

     *注意*: 元组结构体后面要加分号. 元组结构体访问字段的方式和元组一样, 也是使用
     圆点记号按位置索引访问.

     *当一个元组结构体只有一个字段的时候, 我们称之为 New Type 模式* 

**** 单元结构体
     Rust 可以已定义一个没有任何字段的结构体, 即单元结构体.

     单元结构体就是其本身.

     在 Release 编译模式下, x, y, z 三者内存地址相同.

     单元结构体与 New Type 模式类似, 也相当于定义了一个新的类型. 单元结构体以便
     用于一些特定场景, 标准库中表示全范围 ~(..)~ 的 ~RangeFull~, 就是一个单元结
     构体.
     
*** 枚举体
    枚举体(Enum, 也可称为枚举类型或枚举), 该类型包含了全部可能的情况. 用 ~enum~
    关键字定义. 并且有三种形式.

**** 无参数枚举体
     在 main 函数中, 想要使用枚举体的值, 需要使用 Number 前缀.

     可以使用 match 匹配来枚举所有的值, 以处理相应的情况.
     
**** 类 C 枚举体     
**** 带参枚举体
     IpAddr::V4 是 ~fn(u8, u8, u8, u8) -> IpAddr~ 函数指针
     IpAddr::V6 是 ~fn(String) -> IpAddr~ 函数指针

     使用这类枚举体就像函数调用那样, 需要传入实际的参数

     *枚举体在 Rust 中属于非常重要的类型之一*. 一方面它为编程提供了许多方面, 另
     一方面, 它 *保证了Rust 中避免出现空指针*.

     
     

   
    *Option 枚举类型*: 表示 *有值* 和 *无值* 两种情况. 该类型可以作为某些函数的
    返回值.

    Option 类型可以有效地避免开发中出现的 Null 值, 所以 Rust 标准库中也内置了相
    应的类型, 是泛型的枚举体: ~Option<T>~
** 常用集合类型
   在 Rust 标准库 ~std::collections~ 模块下有 4 种通用集合类型:
   - 线性序列: 向量(Vec), 双端队列(VecDeque), 链表(LinkedList).
   - Key-Value 映射表: 无需哈希表(HashMap), 有序哈希表(BTreeMap)
   - 集合类型: 无需集合(HashSet), 有序集合(BTreeSet)
   - 优先队列: 二叉堆(BinaryHeap)

*** 线性队列: 向量
    向量的用法和一般数组是类似的, 但是如果要往向量中增加元素, 则需要用 ~mut~ 来
    创建可变绑定. 访问元素也是通过下标索引来访问的.

    ~vec!~ 是一个宏, 用来创建向量字面量. 宏语句可以使用圆括号, 也可以使用中括号
    和花括号, 一般使用中括号来表示数组. 

*** 线性队列: 双端队列
    *双端队列(Double-ended Queue, 缩写为 Deque)* 是一种同时具有队列(先进先出)和
    栈(后进先出)性质的数据结构. 双端队列中的元素可以从两端中弹出, 插入和删除操作
    被 *限定在队列的两端进行*.

    Rust 中的 ~VecDeque~ 是基于可增长的 RingBuffer 算法实现的双端队列.
    
    双端队列 ~VecDeque~ 实现了 2 种方法: ~push_front()~ 与 ~push_back()~, 前者行
    为像栈, 后者行为像队列.

*** 线性队列: 链表
    Rust 提供的链表是双向链表, 允许在任意一端插入或弹出元素. 但通常最好使用
    ~Vec~ 或 ~VecDeque~ 类型, 因为比链表 *更加快速*, *内存访问效率更高*, 并且可
    以 *更好地利用 CPU 缓存*. [[https://internals.rust-lang.org/t/whats-the-status-of-std-linkedlist-maybe-deprecate-in-rust-2018/8068?page=2][见此]]
    
*** Key-Value 映射表: HashMap 和 BTreeMap
    Rust 集合模块一共提供了 2 个 Key-Value 哈希映射表:
    - ~HashMap<K, V>~
    - ~BTreeMap<K, V>~

    Key 必须是 *可哈希的类型*, Value *必须是在编译期已知大小* 的类型.
    
    区别: HashMap *无序*, BTreeMap *有序*.

*** 集合: HashSet 和 BTreeSet
    ~HashSet<K>~ 和 ~BTreeSet<K>~ 其实就是 ~HashMap<K, V>~ 和 ~BTreeMap<K, V>~
    把 ~Value~ 设置为空元祖的特定类型, 等价于 ~HashSet<K, ()>~ 和 ~BTreeSet<K,
    ()>~. 所以这两种集合的特性如下:
    - 集合中的元素应该是唯一的, 因为是 Key-Value 映射表的 *Key*
    - 同理, 集合中的元素应该都是可哈希的类型
    - HashSet 应该是无序的, BTreeSet 应该是有序的

*** 优先队列: BinaryHeap
    Rust 提供的优先队列是基于 *二叉最大堆(BinaryHeap)* 实现的.
