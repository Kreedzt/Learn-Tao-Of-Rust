* 类型系统
  本性决定行为, 本性取决于行为.

** 通用概念
   *类型是对表示信息的值进行细粒度的区分*. eg: 整数, 小数, 文本等.

   不同的类型占用的内存不同. 与直接操作比特位相比, 直接操作类型可以更安全, 更有
   效地利用利用内存.(eg: Rust 自动分配 4 个字节存储 u32 类型的值)

   计算机除了存储信息外, 还需要处理信息. 这就必然会面临一个问题: 不同类型的值计
   算问题. 类型之间的纷繁复杂的交互形成了类型系统, *是编程语言的基础和核心*, 因
   为编程语言的目的就是存储和处理信息. 不同编程语言之间的区别就在于如何存储和处
   理信息.

   在计算机科学中, 类型系统是最轻量, 最完善的一种方式. 
   在类型系统中, *一切皆类型*. 基于类型定义的一系列组合, 运算和转换等方法, 可以
   看做类型的 *行为*. 类型的行为决定了类型该如何计算, 同时也是一种约束, 有了这种
   约束才可以保证信息被正确处理.

*** 类型系统的作用
    类型系统是一门编程语言不可或缺的部分, 有如下方面的优势:
    - *排查错误*: 很多编程语言都会载编译期或运行期进行类型检查, 以便排查违规行为,
      保证程序正确执行. 如果程序中有类型不一致的情况, 或有未定义的行为发生, 则可
      能导致错误的产生. 尤其对于静态语言来说, 能在编译期排查出错误是一个很大的优
      势, 这样可以尽早地处理问题, 而不必等到运行后崩溃了再解决

    - *抽象*: 类型允许开发者在更高层面进行思考, 这种抽象能力有助于强化编程规范和
      工程化系统. eg: OOP 语言中的类就可以作为一种类型.

    - *文档*: 在阅读代码的时候, 明确的类型声明可以表明程序的行为

    - *优化效率*: 这一点是针对静态编译语言来说的, 在编译期可以通过类型检查来优化
      一些操作, 节省运行时的时间

    - *类型安全*:
      + *类型安全的语言可以避免类型间的无效运算*
        eg: ~3/ "hello"~ 这种不符合算术规则的计算.

      + *类型安全的语言还可以保证内存安全*: 避免空指针, 悬垂指针和缓冲区溢出等导
        致的内存安全问题.

      + *类型安全的语言也可以避免语义上的逻辑错误*
        eg: 以 mm 为党委的数值和以 cm 为单位的数值都是以整数来存储的, 但是可以用
        不同的类型来区分, 避免逻辑错误

        
    尽管类型系统有诸多优点, 但并非所以肚饿编程语言都能 100% 拥有这些优点, 这与它
    们的类型系统的具体设计和实现有关.

*** 类型系统的分类
    在编译期进行类型检查的语言属于 *静态类型*, 在运行期进行类型检查的语言属于 
    *动态类型*. 如果一门语言不允许类型的自动隐式转换, 在强制转换前不同类型无法进
    行计算, 则该语言属于 *强类型*, 反之则属于 *弱类型*.

    *静态类型的语言能在编译期对代码进行静态分析, 依靠的就是类型系统*.
    eg: 越界数组. 有些静态语言, C 和 C++, 在编译期 *不检查* 数组是否越界访问, 运
    行时可能会得到难以意料的结果, 而程序依旧正常运行, 这属于类型系统中未定义的行
    为, 所以它们不是类型安全的语言. 而 *Rust 语言在编译期就能监察处数组是否越界
    访问*, 并给出警告, 让开发者及时修改, 如果开发者没有修改, 那么在运行时也会抛
    出错误并退出线程, 而不会因此去访问非法的内存, 从而保证了运行时的内存安全, 所
    以 *Rust 是类型安全的语言*. 强大的类型系统也可以对类型进行 *自动推导*, 因此
    一些静态语言在编写代码时候不用显式地指定具体的类型, eg: Haskell 就被称为隐式
    静态类型. Rust 语言的类型系统受 Haskell 启发, 也可以自动推导, 但不如 Haskell
    强大. 在 Rust 中大部分地方还是需要显式地指定类型, 类型是 Rust 语法的一部分,
    因此 *Rust 属于显示静态类型*.

    *动态类型的语言只能在运行时进行类型检查*, 但是当有数组越界访问时, 就会抛出异
    常, 执行线程退出操作, 而不是给出奇怪的结果. 所以一些动态语言也是类型安全的,
    eg: Ruby 和 Python. 在其他语言中作为基本类型的整数, 字符串, 布尔值等, 在
    Ruby 和 Python 语言中都是对象. 实际上, 也可将对象看做类型, Ruby 和 Python 语
    言在运行时通过一种名为 Duck Typing 的手段来进行运行时类型检查, 以保证类型安
    全. 在 Ruby 和 Python 语言中, 对象之间通过消息进行通信, 如果对象可以响应该消
    息, 则说明该对象就是正确的类型.

    对象是什么样的类型, 决定了它由什么样的行为; 反过来, 对象在不同上下文中的行为,
    也决定了它的类型. 这其实是一种 *多态性*.

*** 类型系统与多态性
    如果一个类型系统允许一段代码在不同的上下文中具有不同的类型, 这样的类型系统就
    叫做 *多态类型系统*. 对于静态类型的语言来说, 多态性的好处是可以在不影响类型
    丰富的前提下, 为不同的类型编写通用的代码.

    现代编程语言包含了三种多态形式: *参数化多态(Parametric polymorphism)*,
    *Ad-hoc 多态(Ad-hoc polymorphism)* 和 *子类型多态(Subtype polymorphism)*. 如
    果按多态发生的时间来划分, 又可分为 *静多态(Static polymorphism)* 和 *动多态
    (Dynamic Polymorphism)*. 静多态发生在编译期, 动多态发生在运行时. 参数化多态
    和 Ad-hoc 多态一般是静多态, 子类型多态一般是动多态. 静多态牺牲灵活性获取性能,
    动多态牺牲性能获取灵活性. 动多态在运行时需要查表, 占用较多空间, 所以一般情况
    下都使用静多态. Rust 语言同时支持静多态和动多态, 静多态是一种 0 成本抽象.

    *参数化多态实际就是指泛型*. 很多时候函数或数据类型都需要适用于多种类型, 以避
    免大量的重复性工作. 泛型使得语言极具表达力, 同时也能保证静态类型安全.

    *Ad-hoc 多态也叫特定多态*. Ad-hoc 短语源自拉丁语系, 用于表示一种特定情况.
    *Ad-hoc 多态是指同一种行为定义, 在不同的上下文中会响应不同的行为实现*.
    Haskell 语言中使用 Typeclass 来支持 Ad-hoc 多态, Rust 受 Haskell 启发, 使用
    trait 来支持 Ad-hoc 多态. 所以, Rust 的 trait 系统的概念类似于 Haskell 中的
    Typeclass.

    子类型多态的概念一般用在 OOP 语言中, 尤其是 Java 语言. Java 语言中的多态就是
    子类型多态, 它代表一种包含关系, 父类型的值包含了子类型的值, 所以子类型的值有
    时也可以看做父类型的值, 反之则不然. 而 Rust 语言中没有类似 Java 中的集成的概
    念, 所以也不存在子类型多态. 

    所以, *Rust 中的类型系统目前只支持参数化多态和 Ad-hoc 多态*, 也就是: *泛型*
    和 *trait*.

** Rust 类型系统概述
   Rust 是一门强类型且类型安全的静态语言. Rust 中一切皆表达式, 表达式皆有值, 值
   皆有类型. 所以可以说, *Rust 中一切皆类型*.

   除了一些基本的原生类型和符合类型, Rust 把作用域也纳入了类型系统, 这就是第 4
   章要学的生命周期标记. 还有一些表达式, 有时有返回值, 有时没有返回值(也就是只返
   回单元值), 或者有时返回正确的值, 有时返回错误的值, Rust 将这类情况也纳入了类
   型系统, 也就是 ~Option<T>~ 和 ~Result<T, E>~ 这样的可选类型, 从而强制开发人员
   必须分别处理这两种情况. 一些根本无法返回的情况: eg: 线程崩溃, break 或
   continue 等行为, 也都被纳入了类型系统, 这种类型叫做 never 类型. 可以说, Rust
   的类型系统基本囊括了编程中会遇到的各种情况, 一般情况下不会有未定义的行为出现,
   所以说, Rust 是类型安全的语言.

*** 类型大小
    编程语言中不同的类型本质上是内存占用空间和编码方式的不同, Rust 也不例外.
    Rust 中没有 GC, 内存首先由编译器来分配, Rust 代码被编译为 LLVM IR, 其中携带
    了内存分配的信息. 所以 *编译器需要事先知道类型的大小, 才能分配合理的内存*.

    
**** 可确定大小类型和动态大小类型
     Rust 中绝大部分类型都是在 *编译期可确定大小的类型(Sized Type)*, eg: 原生整
     数类型 u32 固定是 4 个字节, u64 固定是 8 个字节.

     Rust 中也有少量的 *动态大小的类型(Dynamic Sized Type, DST)*, eg: str 类型的
     字符串字面量, 编译器就不可能事先知道程序中会出现什么样的字符串,所以对于编译
     器来说, str 类型的大小是无法确定的. 对于这种情况, Rust 提供了引用类型, 因为
     引用总会有固定的且在编译期已知的大小. 字符串切片 ~&str~ 就是一种引用类型,
     它由指针和长度组成.

     #+begin_example
                 /&str\
       栈:       * 5
                 ↓
       堆:       h e l l o
                 \  str /
     #+end_example

     ~&str~ 存储于栈上, str 字符串序列存储于堆上. 这里的堆和栈是指不同的内存空间,
     在第 4 章会详细介绍. ~&str~ 由 两部分组成: *指针* 和 *长度信息*. 其中指针是
     固定大小的, 存储的是 str 字符串序列的起始地址, 长度信息也是固定大小的整数.
     这样一来, ~&str~ 就变成了可确定大小的类型, 编译器就可以正确地为其分配栈内存
     空间, str 也会在运行时在堆上开辟内存空间.

     对于 ~as_ptr()~ 和 ~len()~ 方法, 可以分别获取该字符串字面量存储的地址和长度
     信息. *这种包含了动态大小类型地址信息和携带了长度信息的指针, 叫做胖指针(Fat
     Pointer)*, 所以 ~&str~ 是一种胖指针.

     与字符串切片同理, Rust 中的数组 ~[T]~ 是动态大小类型, 编译器难以确定它的大
     小.

**** 0 大小类型
     除了可确定大小类型和 DST 类型, Rust 还支持 *0 大小类型(Zero Sized, Type,
     ZST)*, eg: 单元类型和单元结构体, 大小都是 0.

     *单元类型和单元结构体大小为 0, 其单元类型组成的数组大小也为 0*. 
     *ZST 类型的特点是, 它们的值就是其本身, 运行时并不占用内存空间*.
     ZST 类型代表的意义正是"空".

     Rust 标准库中的 ~HashSet<T>~ 和 ~BTreeSet<T>~. 它们其实只是把 ~HashMap<K,
     T>~ 换成了 ~HashMap<K, ()>~, 然后就可以共用 ~HashMap<K, T>~ 之前的代码, 而
     不需要重新实现一遍 ~HashSet<T>~ 了.

**** 底类型
     底类型(Buttom Type) 是源自类型理论的术语, 它其实是第 2 章介绍过的 never 类
     型. 特点如下:

     - 没有值
     - 是其他任意的子类型

     如果说 ZST 类型表示 "空" 的话, 那么 *底类型就表示 "无"*. 底类型无值, 而且它
     等价于任意类型, 有点无中生有之意.

     Rust 中的底类型用 *叹号(!)表示*. 此类型也被称为 Bang Type. Rust 中有很多种
     情况确实没有值, 但为了类型安全, 必须把这些情况纳入类型系统进行统一处理. 这
     些情况包括:

     - *发散函数(Diverging Function)*
     - continue 和 break 关键字
     - loop 循环
     - *空枚举*, eg: ~enum Void {}~
       
     发散函数是指挥导致线程崩溃的 ~panic!("This function never returns!")~, 或者
     用于退出函数的 ~std::process::exit~, 这类函数永远都不会有返回值.

     continue 和 break 也是类似的, 它们只是表示流程的跳转, 并不会返回什么. loop
     循环虽然可以返回某个值, 但也有需要无限循环的时候.
     
     Rust 中 if 语句是表达式, *要求所有分支类型一致*, 但是有时候, 分支中可能包含
     了永远无法返回的情况, 属于底类型的一种应用.
       
     Rust 使用 Result 类型来进行错误处理, 强制开发者处理 ~Ok~ 和 ~Err~ 两种情况.
     但是有时可能永远没有 ~Err~, 这时使用 ~enum Void {}~ 就可以避免处理 ~Err~ 的
     情况. 当然这里也可以用 ~if let~ 语句处理, 这里为了说明空枚举的用法故意这样
     使用.
     
*** 类型推导
    类型标注在 Rust 中属于语法的一部分, 所以 Rust 属于显式类型语言. Rust 支持类
    型推断, 但其功能并不像 Haskell 那样强大.

    *Rust 只能在局部范围内进行类型推导*.

**** Turbofish 操作符
     当 Rust 无法从上下文中自动推导出类型的时候, 编译器会通过错误信息告诉开发者,
     请求添加类型标注.

     形如 ~parse::<i32>()~ 这种, 使用 ~::<>~ 形式的为泛型函数标注类型的为
     *turbofish 操作符*.

     
**** 类型推导的不足
     目前看来, Rust 的类型推导还不够强大.

     eg: 使用 ~is_positive()~ 时候需要更确切的类型. 

     所以应尽量显示声明类型.

** 泛型
   泛型(Generic)是一种参数化多态. 使用泛型可以编写更为抽象的代码, 减少工作量. 简
   单来说, 泛型就是把一个繁华的类型作为参数, 单个类型就可以抽象化为一簇类型.

   eg: ~Box<T>~, ~Option<T>~ 和 ~Result<T, E>~ 等, 都是泛型类型.

*** 泛型函数
    除了定义类型, 泛型也可以应用于函数中

    结构体名称旁边的 ~<T>~ 叫做 *泛型声明*.

    *泛型只有被声明之后才可以被使用*. 在为泛型结构体实现具体方法的时候, 也需要声
    明泛型类型.

    对于实现泛型结构体方法中的 ~impl<T>~ 的泛型不可省略.

    Rust 中的泛型属于静多态, 它是一种编译期多态. 在编译期, 不管是泛型枚举, 还是
    泛型函数和泛型结构体, 都会被 *单态化(Monomorphization)*. 单态化是编译器进行
    静态分发的一种策略. 

    *单态化意味着编译器要将一个反向函数生成两个具体类型对于的函数*.
    
    eg: 编译期的单态化函数:
    #+begin_src rust
      fn foo_1(x: i32) -> i32 {
          return x;
      }

      fn foo_2(x: &'static str) -> &'static str {
          return x;
      }

      fn main() {
          foo_1(1);
          foo_2("2");
      }
    #+end_src

    泛型及单态化是 Rust 的最重要的两个功能:
    *单态化静态分发的好处是性能好, 没有运行时开销*.
    *缺点是容易造成编译后生成的二进制文件膨胀*. 

    这个缺点并不影响使用 Rust 编程. 但是需要明白单态化机制, 在平时的编程中注意二
    进制的大小, 如果变得太大, 可以根据具体的情况重构代码来解决问题.
    
** 深入 trait
   可以说 trait 是 Rust 的灵魂, Rust 中所有的抽象, eg: 接口抽象, OOP 范式抽象,
   函数式范式抽象等, 均基于 trait 来完成. 同时, trait 也保证了这些抽象几乎都是运
   行时 0 开销的.

   从类型的角度来说, trait 是 Rust 对 Ad-hoc 多态的支持. 从语义上说, trait 是在
   行为上对类型的约数. 这种约束可以让 trait 有如下 4 种用法:

   - *接口抽象*: 接口是对类型行为的统一约束.
   - *泛型约束*: 泛型的行为被 trait 限定在更有限的范围内
   - *抽象类型*: 在运行时作为一种间接的抽象类型去使用, 动态地分发给具体的类型.
   - *标签 trait*: 对类型约束, 可以直接作为一种 "标签" 使用.

*** 接口抽象
    trait 最基础的用法就是进行接口抽象, 它有如下特点:
    - 接口中可以定义方法, 并支持默认实现
    - 接口中不能实现另一个接口, 但是接口之间可以继承
    - 同一个接口可以同时被多个类型实现, 但不能被同一个类型实现多次.
    - 使用 impl 关键字为类型实现接口方法
    - 使用 trait 关键字来定义接口

    第 2 章的代码中定义的 Fly trait 就是一个典型的接口抽象. 类型 Duck 和 Pig 均
    实现了该 trait, 但具体的行为各不相同. *这正是一种 Ad-hoc 多态*: 同一个
    trait, 在不同的上下文中实现的行为不同. 为不同的类型实现 trait, 属于一种 *函
    数重载*, 也可以说函数重载就是一种 Ad-hoc 多态.

*** 关联类型
    事实上, Rust 中的很多操作符都是基于 trait 来实现的. eg: 加法操作符就是一个
    trait, 加法操作不仅可以针对整数, 浮点数, 也可以针对字符串.
    
    使用 trait 泛型来实现加法抽象, 看上去好像没什么问题, 但是仔细考虑后, 就会发
    现它有一个很大的问题. 一般来说, 对于加法操作要考虑以下两种情况:

    - 基本数据类型: eg: i32 和 i32 类型相加, 处于安全考虑, 结果必然还是 i32 类型
    - 也可以对字符串进行加法操作, 但是 Rust 中可以动态增加长度的只有 ~String~ 类
      型的字符串, 所以一般是 ~String~ 类型的才会实现 ~Add~, 其返回值也必须是
      ~String~ 类型. 但是加法操作符右侧也可以是字符串字面量. 所以, 要面对这种情
      况, ~String~ 的加法操作还比如实现 ~Add<&str, String>~.
      
    不管是以上两种情况的哪一种, ~Add~ 的第二个参数类型总数显得有点多余. 所以,
    Rust 标准库中定义的 ~Add~ trait 使用了另外一种写法.

    #+begin_src rust
      pub trait Add<RHS = Self> {
          type Output;
          fn add(self, rhs: RHS) -> Self::Output;
      }
    #+end_src

    标准库在 type 定义了 Output, 以这种方式定义的类型叫做 *关联类型*. 而
    ~Add<RHS=Self>~ 这种形式表示为类型参数 ~RHS~ 指定了默认值 ~Self~. ~Self~ 是
    每个 trait 都带有的 *隐式类型参数*, 代表实现当前 trait 的具体类型.

    当代码中出现操作符 "+" 的时候, Rust 就会自动调用操作符左侧的 ~add()~ 方法,
    去完成具体的加法操作, 也就是说 "+" 操作与调用 ~add()~ 方法是等价的
    #+begin_example
            1  +  2
            LHS   RHS
             1.add(2)
    #+end_example

    标准库中为 u32 类型实现 Add trait
    #+begin_src rust
      impl Add for $t {
          type Output = $t;
          fn add(self, other: $t) -> $t { self + other }
      }
    #+end_src

    因为 Rust 源码为 u32 实现 ~Add~ trait 的操作符是用宏来完成的, 所以 出现了
    ~$t~ 这样的符号, 第 12 章会降到关于宏的更多细节. 当前这里的 ~$t~ 可以看做
    u32 类型.

    #+begin_src rust
      impl Add for u32 {
          type Output = u32;
          fn add(self, other: u32) -> u32 { self + other }
      }
    #+end_src

    标准库中为 ~String~ 类型实现 ~Add~ trait
    #+begin_src rust
      impl Add<&str> for String {
          type Output = String;
          fn add(mut self, other: &str) -> String {
              self.push(other);
              self
          }
      }
    #+end_src

    ~impl Add<&str>~ 指明了泛型类型为 ~&str~, 并没有使用 ~Self~ 默认类型参数, 这
    表明对于 ~String~ 类型字符串来说, 加号右侧的值类似 ~&str~ 类型, 而非
    ~String~ 类型. 关联类型 ~Output~ 指定为 ~String~ 类型, 意味着加法返回的是
    ~String~ 类型.

    综上所述, 使用关联类型能够使代码更加精简, 同时也对方法的输入和输出尽量很好的
    隔离, 使得代码的可读性大大增强.

    在语义层面上, *使用关联类型也增强了 trait 表示行为的这种语义*, 因为它表示了
    和某个行为(trait)相关联的类型. 在工程上, 也体现出了高内聚的特点.

*** trait 一致性
    既然 ~Add~ 是 trait, 那么就可以通过 ~impl Add~ 的功能来实现操作符重载的功能.
    在 Rust 中, 通过上面对 ~Add~ trait 的分析就可以知道, u32 和 u64 类型是不能直
    接相加的.

    Rust 遵循一条重要的规则: *孤儿规则(Orphan Rule)*. 
    孤儿规则规定: *如果要实现每个 trait, 那么该 trait 和要实现该 trait 的那个类
    型至少有一个要在当前 crate 中定义*. 如果没有孤儿规则的限制, 标准库中 u32 类
    型的加法行为就会被破坏性地改写, 导致所有使用 u32 类型的 crate 可能产生难以预
    料的 Bug.

    除了在本地定义 ~Add~ trait 方法, 还可以在本地创建一个新的类型, 然后为此新类型
    实现 ~Add~, 这同样不会违反孤儿原则.

    注意: *关联类型 Output 必须指定具体类型*.

*** trait 继承
    Rust 不支持传统面向的集成, 但是 *支持 trait 继承*. 子 trait 可以继承父 trait
    中定义或实现的方法. 在日常编程中, trait 中定义的一些行为可能会有重复的情况,
    使用 trait 继承可以简化编程, 方便组合, 让代码更加优美.
    
*** 泛型约束
    使用泛型编程时, 很多情况下的行为 *并不是针对所有类型都实现* 的.

**** trait 限定
     可以使用 ~<T: Add<T, Output=T>>~ 语法进行约束.

     使用 *trait* 对泛型进行约束, 叫做 *trait 限定(trait Bound)*.
     格式:
     #+begin_src rust
       fn generic<T: MyTrait + MyOtherTrait + SomeStandardTrait>(t: T) {}
     #+end_src
     表明: 该类型 T, 必须同时实现 3 个 trait 定义的全部方法, 才能使用该泛型函数

**** 理解 trait 限定
     trait 限定的思想与 Java 中的泛型限定, Ruby 和 Python 中的 *Duck Typing*,
     Golang 中的 *Structural Typing*, Elixir 和 Clojure 中的 *Protocol* 都很相似.
     所以有编写这些编程语言经验的开发者看到 trait 限定会觉得很熟悉. 在类型理论中,
     Structural Typing 是一种根据结构来判断类型是否等价的理论, 翻译过来为结构化
     类型. Duck Typing, Protocol 都是 Structural Typing 的变种, 一般用于动态语言,
     在运行时检测类型是否等价. Rust 中的 trait 限定也是 Structural Typing 的一种
     实现, 可以看做一种 *静态 Duck Typing*.

     从 *数学角度* 来理解 trait 限定可能更加直观. *类型可以看做具有相同属性值的
     集合*. 当生命变量 ~let x: u32~ 时, 意味着 x∈u32.

     现观察如下 trait 声明:
     #+begin_src rust
       trait Paginate: Page + PerPage
     #+end_src
     
     *trait 也是一种类型, 是一种方法集合, 或者说, 是一种行为的集合*.
     以上 trait 的声明意味着: Paginate ⊂ (Page ∩ Perpage), Paginate 是 Page 和
     Perpage 交集的子集.

     所以如下写法:
     #+begin_src rust
       impl<T: A + B> C for T
     #+end_src

     可以解释为 "为所有 T ⊂ (A ∩ B) 实现 trait C".

     *Rust 编程的哲学是组合优于继承*, Rust 并不提供类型层面上的继承, Rust 中所有
     的类型都是独立存在的, 所以 Rust 中的类型可以看做语言允许的最小集合, 不能再
     包含其他子集. 而 trait 限定 可以对这些类型集合进行组合, 也就是求交集.

     总的来说, trait 限定给予了开发者更大的自由度, 因为不再需要类型间的继承, 也
     简化了编译器的检查操作. 包含 trait 限定的泛型属于静态分发, 在编译期通过单态
     化分别生成具体类型的实例, 所以调用 trait 限定中的方法也都是运行时 0 成本的,
     因为不需要在运行时再进行方法查找.

     #+begin_src rust
       fn foo<T: A, K: B + C, R: D>(a: T, b: K, C: R) { /* */ }
     #+end_src

     Rust 提供了 *where* 关键字用来简化此情况:
     #+begin_src rust
       fn foo<T, K, R>(a: T, b: K, c: R) where T: A, K: B + C, R: D {}
     #+end_src
     
*** 抽象类型
    trait 还可以用作 *抽象类型(Abstract Type)*. 抽象类型属于类型系统的一种, 也叫
    做 *存在类型(Existential Type)*. 相对于具体类型而言, 抽象类型无法直接实例化,
    它的每个实例都是具体类型的实例.

    对于抽象类型而言, 编译器可能无法确定其确切的功能和所占的空间大小. 所以 Rust
    目前有 2 种方法来处理抽象类型: *trait 对象* 和 *impl trait*.

**** trait 对象
     在泛型中使用 trait 限定, 可以将 *任意类型的范围根据类型的行为限定到更精确可
     控的范围内*. 从这个角度出发, 也可以将共同有用相同行为的类型集合抽象为一个类
     型, 这就是 trait *对象(trait Object)*. "对象" 这个词来自于面向对象编程语
     言, 因为 trait 对象是对具有相同行为的一组具体类型的抽象, 等价于面向对象中一
     个封装了行为的对象, 所以称其为 trait 对象.

     静态分发与动态分发的工作机制:
     trait 本身也是一种类型, 但它的类型大小 *在编译期是无法确定* 的, 所以 trait
     对象 *必须使用指针*. 可以利用引用操作符 ~&~ 或 ~Box<T>~ 来制造一个 trait 对
     象. trait 对象等价于如下结构体:
     #+begin_src rust
       pub struct TraitObject {
           pub data: &mut(),
           pub vtable: *mut(),
       }
     #+end_src

     该 Object 来自 Rust 标准库, 但它 *并不代表真正的 trait 对象*, 仅仅用于操作
     底层的一些 Unsafe 代码. 这里使用结构体只是为了用它来帮助理解 trait 对象的行
     为.

     *TraitObject* 包含 2 个指针: *data 指针* 和 *vtable 指针*. 以 ~impl MyTrait
     for T~ 为例, data 指针指向 trait 对象保存的类型数据 T, vtable 指针指向包含
     为 T 实现的 MyTrait 的 Vtable(Virtual Table), 该名称来源于 C++, 所以可以称
     之为 *虚表*. 虚表的本质是一个结构体, 包含了析构函数, 大小, 对齐和方法等信息.

     结构如下图:
     #+begin_example
                         TraitObject
       栈:                *         *
                         /           \
       堆:               T    '       '    '    '
                              析构函数 大小 对齐 方法
                        data        vtable
     #+end_example

     在编译期, 编译器 *只知道 TraitObject 包含指针的信息*, 并且指针的大小也是确
     定的, *并不知道要调用哪个方法*. 在运行期, 当有 ~trait_object.method()~ 方法
     被调用时, *TraitObject 会根据虚表指针中从虚表查出正确的指针*, 然后再进行动
     态调用. 这也是将 trait 对象成为动态分发的原因.

     所以 ~dynamic_dispatch(&foo)~ 函数在运行期被调用时, 会先去查虚表, 取出相应
     的方法 ~t.baz()~, 然后调用.

     *并不是每个 trait 都可以作为 trait 对象被使用*, 这依旧和类型大小是否确定有
     关系. 每个 trait 都包含一个隐式的类型参数 Self, 代表实现该 trait 的类型.
     Self 默认有一个隐式的 trait 限定 ~? Sized~, 形如 ~<Self: ? Sized>~,
     ~? Sized trait~ 包括了所有的动态大小类型和所有可确定大小的类型. Rust 中大部
     分类型都默认是可确定大小的类型, 也就是 ~<T: Sized>~, 这也是泛型代码可以正常
     编译的原因.

     当 trait 对象在运行期进行动态分发时, 也必须确定大小, 否则无法为其正确分配内
     存空间, 所以必须同时满足以下 2 条规则的 trait 才可以作为 trait 对象使用.

     - trait 的 Self 类型参数不能被限定为 Sized.
     - trait 中所有的方法都必须是对象安全的.

     满足这两条规则的 trait 就是对象安全的 trait.

     trait 的 Self 类型参数绝大部分情况默认是 *? Sized*, 但也有可能出现被限定为
     Sized 的情况.
     
     标记为 Sized 的情况:
     #+begin_src rust
       trait Foo: Sized {
           fn some_method(&self);
       }
     #+end_src

     Foo 继承自 Sized, 表明: 要为某类型实现 Foo, 必须先实现 Sized. 所以, Foo 中
     的隐式 Self 也必然是 Sized 的, 因为 Self 代表的是那些要实现 Foo 的类型.

     按规则一, Foo *不是对象安全的*. trait 对象本身是动态犯法的, 编译期根本无法
     确定 Self 具体是哪个类型, 因为不知道给哪些类型实现过该 trait, 更无法确定大
     小, 现在又要求 Self 是可确定大小的, 这样造就了 *薛定谔的类型*: 即能确定大小
     又不确定大小.

     *警告*: 以下内容更新: 见此 [[https://github.com/ZhangHanDong/tao-of-rust-codes/issues/137][issue]]
     
     当把 trait 当做对象使用时, 其内部类型就默认为 Unsized 类型, 只是将其置于编
     译期可确定大小的胖指针背后, 以供运行时动态调用. 对象安全的本质就是为了让
     trait 对象可以安全地调用相应的方法. 如果没有 Sized 的限定, 就很容易写出无用
     的类型. eg: Box, 虽然会通过编译, 但是不能用它做任何事情. 对于更复杂的
     trait, 往往就没有这么明显了, 只有在做了大量繁重的工作之后可能会突然发现某个
     trait 对象无法正常调用方法.

     trait 对象, 在 *运行时已经查出了具体类型信息*, 要通过虚表调用相应的方法. 不
     像静态分发那样, trait 对象不是为每个类型都实现 trait 的方法.
     所以, *为 trait 增加 Sized 限定, 然后编译器自动为该 trait 实现自身*, 就可以
     在编译期准确排出无效的 trait 对象. 这就是对象安全.

     需要注意的是: 对象安全和内存安全并无直接的关联, 它指示保证 trait 对象在运行
     时可以安全准确地调用相关的方法.

     trait 对象在内部也维护 2 个表: safe_vtable 和 nonself_vtable. 
     标记有 ~where Self: Sized~ 的会被归类到 nonself_vtable, 也就是说, 不会被
     trait 对象调用. 所以反过来, 当不希望 trait 作为 trait 对象时, 可以使用
     ~Self:Sized~ 进行限定.

     *对象安全的方法必须满足以下三点之一*: (注意是 *之一*, 不是 *全部*)
     - 方法受 *Self: Sized* 约束
     - 方法签名同时满足以下三点
       + 必须不包含任何泛型参数. 如果包含泛型, *trait* 对象在 *虚表(Vtable)* 中
         查找方法时将不确定该调用哪个方法.
       + *第一个参数必须为 Self 类型或可以解引用为 Self 的类型* (也就是说, 必须
         有接收者, eg: ~self~, ~&self~, ~&mut self~ 和 ~self: Box<Self>~, 没有接
         收者的方法对 trait 对象毫无意义).
       + Self 不能出现在除第一个参数之外的地方, *包括返回值中*.
         这是因为如果出现 Self, 那就意味着 ~Self~ 和 ~self~, ~&self~ 或 ~&mut
         self~ 的类型相匹配.
         btw: 返回值的 Self 受 ~Self: Sized~ 限定, 因为满足方法受 *Self:
         Sized* 约束(也就是第一条)

       这三点可以总结为一句话: *没有额外 Self 类型参数的非泛型成员方法*.

     - trait 不能包含关联常量(Associated Constant).在 Rust 2018 版本中, trait 中
       可以增加默认的关联常量, 其定义方法和关联类型差不多, 只不过需要使用
       ~const~ 关键字.

       
     在 Rust 2018 版本中, 引入了可以 *静态分发的抽象类型 impl Trait*. 如果说
     *trait 对象* 是 *装箱抽象类型(Boxed Abstract Type)* 的话, 那么 impl Trait
     就是 *拆箱抽象类型(Unboxed Abstract Type)*. "装箱" 和 "拆箱" 是业界的抽象俗
     语, 其中 "装箱" 代表将值托管到堆内存, 而 "拆箱" 则是在栈内存中生成新的值,
     更详细的内存会在第 4 章描述. 总之: 装箱抽象类型代表动态分发, 拆箱抽象类型代
     表静态分发.

     *目前 impl trait 只可以在输入的参数和返回值两个位置使用*. 在不远的将来, 还
     会扩展到其他位置, eg: let 定义, 关联类型等.

     将 impl Trait 语法用于参数位置的时候, 等价于使用 trait 限定的泛型.

     将 impl Trait 语法用于返回值位置的时候, *实际上等价于给返回类型增加了一种
     trait 限定范围*. 

     相比于使用 trait 对象, 使用 impl Trait 会拥有更高的性能.

     *警告*: 此处有更新, 见 [[https://github.com/ZhangHanDong/tao-of-rust-codes/issues/269][issue]]
     即便使用相同的 Trait 签名, 编译器 *也不会认为是相同类型*.

     在 Rust 2018 中, 为了在语义上和 impl Trait 语法相对应, 专门为动态分发的
     *trait 对象* 增加了新的语法 *dyn Trait*, 其中 dyn 是 Dynamic(动态) 的缩写.
     即, impl Trait 意味着静态分发, dyn Trait 代表动态分发.
     
*** 标签 trait
    trait 这种对行为约束的特性也非常适合作为 *类型的标签*. 可以起到标识的作用.

    Rust 一共提供了 5 个重要标签的标签 trait, 都被定义在标准库 ~std::marker~ 模
    块中. 分别如下:

    - *Sized* trait, 用来标识编译期可确定大小的类型
    - *Unsize* trait: 目前该 trait 为实验特性, 用于标识动态大小类型(DST).
    - *Copy* trait: 用来标识可以按位复制其值的类型.
    - *Send* trait: 用来标识可以跨线程安全通信的类型.
    - *Sync* trait: 用来标识可以在线程间安全共享引用的类型.

**** Sized trait
     Sized trait 非常重要, *编译器用它来识别可以在编译期确定大小的类型*.

     #+begin_src rust
       #[lang = "sized"]
       pub trait Sized {
           // 代码为空, 无具体实现方法
       }
     #+end_src

     Sized trait 是一个 *空 trait*, 因为仅仅作为标签 trait *供编译器使用*. 这里
     真正起 "打标签" 作用的是第一行的属性 ~#[lang="sized"]~, 该属性 lang 表示
     Sized trait 供 Rust 语言本身使用, 声明为 "sized", 称为 *语言项(Lang Item)*,
     这样编译器就知道 Sized trait 如何定义了. 还有一个相似的例子是加号操作, 当 2
     个整数相加的时候, eg: ~a+b~, 编译器就回去找 ~Add:add(a,b)~, 这也是因为加号
     操作是语言项 ~#[lang="add"]~.

     Rust 语言中大部分类型都是 *默认 Sized 的*, 所以在写泛型结构体的时候, 没有显
     式地加上 Sized trait 限定. 如下:
     #+begin_src rust
       struct Foo<T>(T);
       struct Bar<T: ?Sized>(T);
     #+end_src

     此处 ~Foo~ 等价于 ~Foo<T: Sized>~, 如果需要在结构体中使用动态大小类型, 则需
     要改为 ~<T: ?Sized>~ 限定.

     ~? Sized~ 是 ~Sized trait~ 的另一种语法. 
     #+begin_example
                                 编译器 
                                 /     \
                              T:Unsize  T:Sized
                              不可确定大小  可确定大小
                                 \     /
                                  T:?Sized
     #+end_example

     目前 Rust 中的动态类型有 trait 和 [T], 其中 [T] 代表一定数量的 T 在内存中依
     次排列, 但不知道具体的数量, 所以它的大小是位置的, 用 Unsized 来标记. eg:
     str 字符串和定长数组 [T;N]. [T] 其实是 [T;N] 的特例, 当 N 的大小未知时就是
     [T].

     而 ~? Sized~ 标识的类型包含了 Sized 和 Unsize 所表示的两种类型. 所以形如
     ~Bar<T:?Sized>~ 的声明支持编译器可确定大小类型和动态大小类型两种类型.

     但是动态大小类型如要遵循如下三条规则:

     - 只可以通过胖指针来操作 Unsize 类型, eg: ~&[T]~ 或 ~&Trait~.
     - 变量, 参数和枚举变量类型 *不能使用动态大小类型*.
     - 结构体中只有最后一个字段可以使用动态大小类型, 其他字段不可以使用.

**** Copy trait
     Copy trait 用来标记可以按位复制的类型, 按位复制等价于 C 语言中的 memcpy.

     以下内容更新自: [[https://github.com/ZhangHanDong/tao-of-rust-codes/issues/62][issue]]
     *Tip*: memcpy 只是复制一段内存, 可以从栈到栈, 栈到堆, 堆到栈. 只需要传入源
     地址和目标地址, 就可复制地址指向内存中的一段数据, 至于这段数据的含义是地址
     还是什么, memcpy 并不管

     地址本身决定了是栈还是堆, 因为本身都是虚拟空间地址.

     Copy trait 的内部实现:
     #+begin_src rust
       #[lang="copy"]
       pub trait Copy:Clone {
           // 代码为空, 无具体实现方法
       }
     #+end_src

     以上代码的 lang 属性中, 此时声明为 "copy". 此 Copy trait 继承自 Clone
     trait, 意味着, 要实现 Copy trait 的类型, 必须实现 Clone trait 中定义的方法.

     定义于 ~std::clone~ 模块中的 Clone trait 的内部实现:
     #+begin_src rust
       pub trait Clone: Sized {
           fn clone(&self) -> Self;

           fn clone_from(&mut self, source: &Self) {
               &self = source.clone()
           }
       }
     #+end_src

     Clone trait 继承自 Sized, 意味着要实现 Clone trait 的对象必须是 Sized 类型.
     默认实现是调用的 ~clone()~ 方法, 所以对于要实现 Clone trait 的对象, 只需实
     现 ~clone()~ 方法即可.

     如果想让一个类型实现 Copy trait, 就必须同时实现 Clone trait.

     可以通过 derive 属性实现: ~#[derive(Copy, Clone)]~.

     Rust 为很多基础数据类型都实现了 Copy trait, eg: 常用的数字类型, 字符(Char),
     布尔类型, 单元值, 不可变引用等.
     
     可以利用 Copy trait 限定的泛型来检测数据结构是否实现了 Copy trait 类型.

     空 Copy trait 的意义: Copy 是一个标签 trait, 编译器做类型检查时会检测类型所
     带的标签, 以验证它是否 "合格". *Copy 的行为是一个隐式的行为, 开发者不能重载
     Copy 行为, 它永远都是一个简单的位复制*. Copy 隐式行为发生在执行变量绑定, 函
     数参数传递, 函数返回等场景中, 因为这些场景是开发者无法控制的, 所以需要编译
     器来保证. 在第 4 章中, 会对 Copy 语义有更深的了解.

     Clone trait 是一个显式的行为, 任何类型都可以实现 Clone trait, 开发者可以自
     由地按需实现 Copy 行为. eg: String 类型并没有实现 Copy trait, 但是它实现了
     Clone trait, 如果代码有需要, 只需要调用 String 类型的 clone 方法即可.

     *注意*: 如果一个类型是 Copy 的, 它的 clone 方法仅仅需要返回 ~*self~ 即可.

     *并非所有类型都可以实现 Copy trait*. 对于自定义类型来说, *必须让所有的成员
     都实现了 Copy trait, 这个类型才有资格实现 Copy trait*. 如果是数组类型, 其内
     部元素都是 Copy 类型, *则数组本身就是 Copy 类型*; 如果是元组类型, 且其内部
     元素都是 Copy 类型, 则该 *元组会自动实现 Copy*; 如果是结构体或枚举类型, 只
     有当每个内部成员都实现 Copy 时, 它才可以实现 Copy, 并不会像元组那样自动实现
     Copy.

**** Send trait 和 Sync trait
     Rust 作为现代编程语言, 自然也提供了语言级的并发支持. 只不过 Rust 对并发的支
     持和其他语言有所不同. Rust 在标准库中提供了很多并发相关的基础设施, eg: 线程,
     Channel, 锁和 Arc 等, 这些都是独立于语言核心之外的库, 意味着基于 Rust 的并
     发方案不受标准库和语言的限制, 开发人员可以编写自己所需的并发模型.

     一直以来, 多线程并发编程都存在很大问题, 因为它会增加复杂性, 想要编写正确非
     常困难, 调试也非常困难, 难以将问题复现. 线程不安的代码胡因为共享内存而产生
     内存破坏(Memory Corruption) 行为.

     多线程之所以有这么严重的问题, 是因为系统级的线程是不可控的, 编写好的代码不
     一定会按照的顺序执行, 会带来 *竞态条件(Race Condition)*. 不同的线程同时访问
     一块共享变量也会造成 *数据竞争(Data Race)*. *竞态条件是不可能被消除的, 数据
     竞争是有可能被消除的, 而数据竞争是线程安全最大的 "隐患"*. 很多其他语言通过
     各种成熟的并发解决方案来支持并发编程, eg: Erlang 提供轻量级进程和 Actor 并
     发模型; Golang 提供了协程和 CSP 并发模型. 而 Rust 则从正面解决了这个问题,
     它的 "秘密武器" 是类型系统和所有权机制.

     Rust 提供了 *Send* 和 *Sync* 两个 trait, 它们是 Rust 无数据竞争并发的基石.

     - 实现了 Send 的类型, 可以安全地在线程间传递值, 也就是说可以跨线程传递所有
       权.
     - 实现了 Sync 的类型, 可以跨线程安全地传递共享(不可变)引用.

     有了这 2 个标签 trait, 就可以把 Rust 中所有的类型归为 2 类: *可以安全跨线程
     传递的值和引用*, 以及 *不可以跨线程传递的值和引用*. 再配合所有权机制, 带来
     的效果就是: Rust *能够在编译期就检查出数据竞争的隐患*, 而不需要等到运行时再
     排查.

     多线程共享的数据类型 *必须实现了 Send 和 Sync triat*, 否则因为没有做线程同
     步处理, 编译器会报错(必然不是线程安全的).

     Send 和 Sync 标签 trait 与 Copy, Sized 一样, 内部也没有具体的方法实现. 仅仅
     是标记, 可以安全地跨线程传递和访问的类型用 Send 和 Sync 标记, 否则用 ~!Send~
     和 ~!Sync~ 标记.

     Send 和 Sync 的内部实现
     #+begin_src rust
       #[lang = "send"]
       pub unsafe trait Send {
           // 代码为空, 无具体实现方法
       }

       // ...

       #[lang = "sync"]
       pub unsafe trait Sync {
           // 代码为空, 无具体实现方法
       }
     #+end_src
     
     Rust 为所有类型实现 Send 和 Sync:
     #+begin_src rust
       // 特殊语法: for..
       unsafe impl Send for .. {}
       impl<T: ?Sized> !Send for *const T {}
       impl<T: ?Sized> !Send for *mut T {}
     #+end_src

     特殊语法: ~for ..~: 表示为所有类型实现 Send, Sync 也同理. 同时, 第二行和第
     三行也对 2 个原生指针实现了 ~!Send~, 代表它们不是线程安全的类型, 将它们排除
     出去.

     对于自定义的数据类型, 如果其成员类型必须全部实现 Send 和 Sync, 此类型才会被
     自动实现 Send 和 Sync. Rust 也提供了类似 Copy 和 Clone 那样的 derive 属性来
     自动导入 Send 和 Sync 的实现, 但是 *并不建议开发者使用该属性*, 因为它可能引
     起编译器检查不到的线程安全问题.

     总的来说, Rust 拼接 Send, Sync 和所有权机制, 在编译期就可以检测出线程安全的
     问题, 保证了无数据竞争的并发安全, 让开发者可以 "无恐惧" 地编写多线程并发代
     码, 并且可以让开发者自由使用各种并发模型.

** 类型转换
   在编程语言中, 类型转换分为 *隐式类型转换(Implicit Type Conversion)* 和 *显示
   类型转换(Explicit Type Conversion)*. 隐式类型转换是由编译器或解释器来完成的,
   开发者并未参与, 所以又称之为 *强制类型转换(Type Coercion)*. 显式类型转换是由
   开发者指定的, 就是一般意义上的 *类型转换(Type Cast)*.

   不当的类型转换会带来内存安全问题. eg: C 语言和 JavaScript 语言中的隐式类型转
   换, 如果不多加注意, 可能会得到意料之外的结果. eg2: C 语言不同大小类型相互转换,
   长类型转换为短类型会造成溢出等问题. 反观 Rust 语言, 只要不乱用 unsafe 块来跳
   过编译器检查, 就不会因为类型转换出现安全问题.

*** Deref 解引用
    Rust 中的隐式类型转换基本上只有 *自动解引用*. 自动解引用的目的主要是方便开发
    者使用智能指针. Rust 中提供的 ~Box<T>~, ~Rc<T>~ 和 ~String~ 等类型, 实际上是
    一种 *智能指针*. 它们的行为就像指针一样, 可以通过 "解引用" 操作符进行解引用,
    来获取其内部的值进行操作. 第 4 章会介绍关于智能指针的更多细节.

**** 自动解引用
     自动解引用虽然是编译器来做的, 但是 *自动解引用的行为可以由开发者来定义*.

     一般来说, 引用使用 ~&~ 操作符, 而解引用使用 ~*~ 操作符, 通过实现 Deref
     trait 来自定义解引用操作. Deref 有一个特性是强制类型转换, 规则是这样的: 
     *如果一个类型 T 实现了 ~Deref<Target=U>~, 则该类型 T 的引用(或智能指针) 在
     应用的时候会被自动转换为类型 U* 
     
     Deref trait 内部实现:
     #+begin_src rust
       pub trait Deref {
           type Target: ?Sized;
           fn deref(&self) -> &Self::Target;
       }

       pub trait DerefMut: Deref {
           fn deref_mut(&mut self) -> &mut Self::Target;
       }
     #+end_src

     ~DerefMut~ 和 ~Deref~ 类似, 只不过它是返回 *可变引用* 的. ~Deref~ 中包含关
     联类型 ~Target~, 它表示解引用之后的目标类型.

     ~String~ 类型实现了 ~Deref~:
     #+begin_src rust
       impl ops::Deref for String {
           type Target = str;
           fn deref(&self) -> &str {
               unsafe {
                   str::from_utf8_unchecked(&self.vec)
               }
           }
       }
     #+end_src
     
     所以 ~&String~ 类型会被自动隐式转换为 ~&str~. 除了 ~String~ 类型, 标准库中
     常用的其他类型都实现了 ~Deref~.
     eg: ~Vec<T>~, ~Box<T>~, ~Rc<T>~, ~Arc<T>~ 等.

     *实现 ~Deref~ 的目的只有一个, 就是简化编程*.
     
**** 手动解引用
     有些情况下, 就算实现了 ~Deref~, 编译器也不会自动解引用.

     当某类型和其解引用模板类型中包含了相同的方法时, 编译器就不知道该用哪一个了.
     此时就需要 *手动解引用*.

     针对 match 引用需要手动解引用
     
     手动解引用把 ~&String~ 类型转换成 ~&str~ 类型, 具体有下列几种方式:
     - ~match x.deref()~, 直接调用 deref 方法, 需要 ~used std::ops::Deref~
     - ~match x.as_ref()~, ~String~ 列席提供了 ~as_ref~ 方法来返回一个 ~&str~ 类
       似, 该方法定义于 ~AsRef~ trait 中
     - ~match x.borrow()~, 方法 borrow 定义于 ~Borrow~ trait 中, 行为和 ~AsRef~
       类型一样. 需要 ~use std::borrow::Borrow~.
     - ~match &*x~, 使用 "解引用" 操作符, 将 ~String~ 类型转换为 ~str~, 然后再用
       "引用" 操作符转为 ~&str~.
     - ~match &x[..]~, 这是因为 ~String~ 类型的 index 操作可以返回 ~&str~ 类型

     除了自动解引用隐式转换, Rust 还提供了不少显式的手动转换类型的方式.

*** as 操作符
    as 操作符最常用的场景就是转换 Rust 中的基本数据类型. 需要注意的是, as 关键
    字 *不支持重载*.

    *注意*: 对长(大小)类型转为短(大小)类型时, 会被 *截断处理*. 这些情况下, 最好
    使用标准库中提供的专门的方法, 而不要直接使用 as 操作符.
     
**** 无歧义完全限定语法
     为结构体实现多个 trait 时, 可能出现同名方法

     不论是当做 trait 静态函数使用还是使用 as 操作符, 都叫做 *无歧义完全限定语法
     (Fully Qualified Syntax for Disambinguation)*, 曾经也有另外一个名字: *通用
     函数调用语法(UFCS)*. 这两种方式的共同之处就是都需要将结构体实例变量 s 的引
     用显式地传入 test 方法中. 但是建议用后者, 因为 ~<S as A>::test()~ 语义比较
     完整, 它表明了调用的是 S 结构体实现 A 中的 test 方法. 而第一种方式 *遗漏了*
     S 结构体这一信息, 可读性相对差一些. 这两种方式都可以看做 *对 trait 行为的转
     换*.

**** 类型和子类型相互转换
     as 转换还可以用于 *类型* 和 *子类型* 之间的转换. Rust 中没有标准定义中的子
     类型, eg: 结构体继承, 但是 *生命周期标记可看做子类型*. eg: ~&'static str~
     类型是 ~&'a str~ 类型的子类型, 因为二者的生命周期标记不同, ~'a~ 和
     ~'static~ 都是生命周期标记, 其中 ~'a~ 是泛型标记, 是 ~&str~ 的通用形式, 而
     ~'static~ 则是特指静态生命周期的 ~&str~ 字符串. 所以, 通过 as 操作符转换可
     以将 ~&'static str~ 类型转为 ~&'a str~ 类型.

*** From 和 Into
    *From* 和 *Into* 是定义于 ~std::convert~ 模块中的两个 trait. 它们定义了
    *from* 和 *into* 两个方法, 这两个方法互为反操作.
    
    From 和 Into 的内部实现
    #+begin_src rust
      pub trait From<T> {
          fn from(T) -> Self;
      }

      pub trait Into<T> {
          fn into(self) -> T;
      }
    #+end_src

    对于类型 T, 如果它实现了 ~From<U>~, 则可以通过 ~T::from(u)~ 来生成 T 类型的
    实例, 此处 u 为 U 的类型实例.

    关于 Into 有一条默认的规则: *如果类型 U 实现了 From<T>, 则 T 类型实例调用
    into 方法就可以转换为类型 U*. 这是因为 Rust 标准库内部有一个默认的实现.

    为所有实现了 ~From<T>~ 类型的 T 实现 ~Info<U>~:
    #+begin_src rust
      impl<T, U> Into<U> for T where U: From<T>
    #+end_src
    
    ~String~ 类型实现了 ~From<&str>~, 所以可以使用 into 方法将 ~&str~ 转换为
    ~String~:
    #+begin_example
                   From<T>
      -------   <--------------  -------
      |  U  |                    |  T  |
      -------   -------------->  -------
         |           Into<U>        |
         |                          |
       String                      &str
    #+end_example
    
    所以, 一般情况下, 只需要实现 From 即可, 除非 From 不容易实现, 才需要考虑实现
    into.

    在标准库中, 还包含了 *TryForm* 和 *TryInto* 两种 trait, 是 *From* 和 *Into*
    的错误处理版本, 因为类型转换是有可能发生错误的, 所以在需要进行错误处理的时候
    可以使用 *TryFrom* 和 *TryInto*. (Rust v1.34.0 已稳定)

    另外, 标准库中还包含了 *AsRef* 和 *AsMut* 两种 trait, 可以将值分别转换为不可
    变引用和可变引用. AsRef 和标准库的另外一个 *Borrow* trait 功能有些类似, 但是
    AsRef 比较轻量级, 它只是简单地将值转换为引用, 而 Borrow trait 可以用来将某个
    复合类型抽象为拥有借用语义的类型. 更详细的内存请参考标准库文档.

** 当前 trait 系统的不足
   虽然当前的 trait 系统很强大, 但依然有很多需要改进的地方, 主要包括以下三点:
   - 孤儿规则的局限性
   - 代码复用的效率不高
   - 抽象表达能力有待改进 

*** 孤儿规则的局限性
    孤儿规则虽然一定成都市保持了 trait 的一致性, 但是它还有一些局限性.

    在设计 trait 时, 还需要考虑是否会影响下游的使用者. 
    eg: 在标准库实现一些 trait 时, 还需要考虑是否需要为所有的 T 或 ~&'a T~ 实现
    该 trait.
    
    为所有的 T 或 ~&'a T~ 实现 Bar trait
    #+begin_src rust
      impl<T:Foo> Bar for T { }
      impl<'a, T:Bar> Bar for &'a T {}
    #+end_src
    
    对于下游的 crate 来说, 如果想要避免孤儿规则的影响, 还必须使用 NewType 模式或
    者其他方式将远程类型包装为本地类型, 这就带来了很多不便.

    另外, 对于一些本地类型, 如果将其放到一些容器中, eg: ~Rc<T>~ 或 ~Option<T>~,
    那么这些本地类型就会变成远程类型, 因为这些容器类型都是在标准库中定义的, 而非
    本地.

    ~Box<T>~ 脱离孤儿规则限制, 存在 ~#[fundamental]~ 属性标识. 实现源码如下:
    #+begin_src rust
      #[fundamental]
      #[stable(feature = "rust1", since = "1.0.0")]
      pub struct Box<T: ?Sized>(Unique<T>);
    #+end_src
    该属性就是告诉编译器, ~Box<T>~ 享有 "特权", 不必遵循孤儿规则.

    除了 ~Box<T>~, ~Fn~, ~FnMut~, ~FnOnce~ 和 ~Sized~ 等都加上了
    ~#[fundamental]~ 属性, 代表这些 trait 也同样不受孤儿规则的限制.
    
*** 代码复用的效率不高
    除了孤儿规则, Rust 其实还遵循另外一条规则: *重叠(Overlap)规则*. 该规则规定了
    不能为重叠的类型实现同一个 trait.

    #+begin_src rust
      impl<T> AnyTrait for T {}
      impl<T> AnyTrait for T where T:Copy {}
      impl<T> AnyTrait for i32 {}
    #+end_src

    以上代码中:
    - T 是泛型, 指代所有的类型
    - T where T: Copy 是受 trait 限定约束的泛型 T, 指代实现了 Copy 的一部分 T,
      是所有类型的子集
    - i32 是一个具体的类型

    显而易见, 上面三种类型发生了 *重叠*. T 包含了 ~T: Copy~, 而 ~T: Copy~ 包含了
    ~i32~. 这违反了重叠规则, 所以编译会失败. 这种实现 trait 的方式在 Rust 中叫
    *覆盖式实现(Blanket impl)*.

    重叠规则和孤儿规则一样, 都是为了保证 trait 一致性, 避免发生混乱, 但是也带来
    了一些问题, 主要包括以下两个方面:

    - 性能问题
    - 代码很难复用

    为所有类型 T 实现 AddAssign:
    #+begin_src rust
      impl<R, T: Add<R> + Clone> AddAssign<R> for T {
          fn add_assign(&mut self, rhs: R) {
              let tmp = self.clone() + rhs;
              *self = tmp;
          }
      }
    #+end_src
    
    以上代码中, 为所有类型 T 实现了 AddAssign, 该 trait 定义的 add_assign 方法是
    += 赋值操作对应的方法. 这样实现虽然好, 但是会带来性能问题, 因为会 *强制所有
    类型* 都使用 clone 方法, 该方法会有一定的成本开销, 但实际上有的类型并不需要
    clone. 因为有重叠规则的限制, 不能为某些不需要 clone 的具体类型重新实现
    add_assign 方法. 所以在标准库中, 为了实现更好的性能, 只好为每个具体的类型都
    各自实现了一遍 AddAssign.

    以上代码中, *重叠规则严重影响了代码的复用*. 如果没有此规则, 可以默认使用上面
    对泛型 T 的实现, 然后对不需要 clone 的类型重新实现 AddAssign, 那么就完全没必
    要为每个具体类型都实现一遍 add_assign 方法, 可以省掉很多重复代码. 当然, 此处
    只是为了说明重叠规则的问题, 实际上在标准库中会使用宏来简化具体的实现代码.

    那么为了缓解重复规则带来的问题, Rust 引入了 *特化(Specialization)*. 特化功能
    暂时只能用于 impl 实现, 所以也称为 *impl 特化*. 不过该功能目前还未文档发布,
    只能在 Nightly 版本的 Rust 之下使用 ~#![feature(specialization)]~ 特性.
    
    此处示例代码有改动, 见 [[https://github.com/ZhangHanDong/tao-of-rust-codes/issues/260][issue]]

    特化功能有点类似面向对象语言中的继承, ~Diver::<String>~ "继承" 了
    ~Diver::<T>~ 中的实现. 而 ~Diver::<&' static str>~ 则使用了本身的 swim 方法
    实现. 
    
*** 抽象表达能力有待改进
    迭代器在 Rust 中应用广泛, 但是它目前有一个 *缺陷*:
    *在迭代元素的时候, 只能按值迭代*, 有时必须重新分配数据, 而 *不能通过引用来复
    用原始的数据*. eg: ~std::io:Lines~ 类型用于按行读取文件数据, 但是该迭代器只
    能读取一行数据分配一个新的 ~String~, 而 *不能重用缓冲区*. 这样就影响了性能.
    这里提到的迭代器相关内容会砸第 6 章进行介绍.

    这是因为迭代器的实现基于关联类型, 而管理那类型目前只能支持具体的类型, 而 *不
    能支持泛型*. 导致无法支持引用类型, 因为 Rust 里规定使用引用类型必须标明生命
    周期参数, 而此恰恰是一种泛型类型参数.

    为了解决这个问题, 就必须允许迭代器支持引用类型. 只有支持引用类型, 才可以重用
    内部缓冲区, 而不需要重新分配新的内存. 所以, 就必须实现一种更高级别的类型多态
    性, 即 *泛型关联类型(Generic Associated Type, GAT)*.

    ~Item<'a>~ 是一种类型构造器, 只有在为其制定具体的类型之后才算一个真正的类型,
    所以 *GAT* 也被称为 *ACT(Associated type constructor)*, 即 *关联类型构造器*.

    目前 GAT 依旧是试验性特性(需要 ~#![feature(generic_associated_types)]~ 才能使用)

** 小结
   本章阐述了 Rust 最为重要的类型系统: 从通用概念开始, 介绍了声明是类型系统, 类
   型系统的种类, 类型系统中的多态等; 然后逐步探索了 Rust 中的类型系统. 如果没有
   类型系统, Rust 语言的安全基石将不复存在. 通过学习本章, 可以对 Rust 的类型系统
   建立完善的 *心智模式(Mental Model)*, 为彻底掌握 Rust 打下重要的基础.

   Rust 除了使用类型系统来存储信息, 还试图将信息处理过程中的各种行为都纳入类型系
   统, 以防止未定义的行为发生. 如果说类型系统是 "法律", 那么编译器就是 Rust 类型
   系统世界中最严格的 "执法者". 编译器在编译期金旭亮严格的类型检查, 保证了 Rust
   的内存安全和并发安全.

   Rust 的类型系统也是极具 "0 成本抽象" 的保证. trait 是 Rust 中 Ad-hoc 多态的实
   现, trait 可以进行接口抽象, 对泛型进行限定, 支持静态分发. trait 也模糊了类型
   和行为的界限, 让开发者可以在多种类型之上按照行为统一抽象类型. 抽象类型支持
   trait 对象和 impl Trait 语法, 分别为动态分发和静态分发.

   最后, 我们了解了 RUst 中的隐式类型转换和显式类型转换的区别和各自的方法. 其中
   隐式类型转换基本上自有自动解引用, 它是为了简化编程而提供的. 跟其他弱类型语言
   中的隐式类型转换不一样, Rust 中的隐式类型转换是类型安全的. 通过 as 关键字可以
   对原生类型进行更安全的显式转换, 但对一些自定义类型, 还需要实现 AsRef 或
   From/Into 这样的 trait 来支持显式类型转换.
