* 结构化编程
  编程也需要考虑系统结构, 分层和架构. 无论是采用面向对象还是函数式的开发思想, 可
  以代码复用和高内聚低耦合的结构就是一种美. 而语言的范式在很大程度上决定了使用该
  语言编写出的代码的组织结构. 对于面向对象范式的语言, 其核心的概念是继承, 多态和
  封装, 它将对象作为程序的基本构建单元. 而函数式范式语言将函数作为其程序的基本构
  建单元, 采用抽象和复合等手段来组织和复用代码. 这两种方式各有优缺点. 

  面向对象范式在代码结构化封面的优点在于更加符合直觉, 缺点是性能差、过渡封装, 基
  于类继承的方式也会造成强耦合. 函数式范式的优点在于它的核心思想是 "组合优于继承
  ", 与面向对象范式相比, 其复用的粒度更小, 更自由灵活, 耦合程度更低, 但其缺点是
  学习成本比较高.

  作为现代系统级的编程语言, Rust 汲取了两个不同编程范式的优势, 提供了结构体、枚
  举体和 trait 这三驾马车来撑起程序结构. 本章主要围绕结构体和枚举来阐述如何使用
  Rust 进行结构化编程.

** 面向对象风格编程
   严格来说, Rust 并不符合标准的面向对象语言的定义. eg: Rust 即不存在类或对象的
   概念, 也没有父子继承的概念. 然而, Rust 却支持面向对象风格的封装. 传统面向对象
   中的父子继承是为了实现代码复用和多态, 其本质在类型系统概念中属于类型多态, 而
   Rust 使用 trait 和泛型提供的参数化多态就完全满足了这个需求. 对于代码复用,
   Rust 是通过泛型单态化和 trait 对象来避免代码重复, 从而支持代码复用的, 虽然相
   对于传统面向对象语言中的父子继承来说功能较弱, 但 Rust 还提供了功能强大的宏(包
   括 macro 和 procedural macro)系统来帮助复用代码, 甚至还可以使用一些设计模式来
   避免代码重复. Rust 还实现了一种名叫 *特化(specialization)* 的功能来增强代码的
   高效复用.

   总而言之, Rust 对面向对象编程风格的支持可以总结为以下几点:

   - *封装*: Rust 提供了结构体(Struct)和枚举体(Enum)来封装数据, 并可使用 ~pub~
     关键字定义其字段可见性; 提供了 ~impl~ 关键字来实现数据的行为.
   - *多态*: 通过 trait 和泛型以及枚举体(Enum)来允许程序操作不同类型的值.
   - *代码复用*: 通过泛型单态化, trait 对象, 宏(macro), 语法扩展(procedural
     macro), 代码生成(code generation)来设计模式.

*** 结构体
    结构体(Struct)和枚举体(Enum)是 Rust 中最基本的两种复合类型. 对于 Rust 类型系
    统而言, 这两种复合类型实际上属于同一种概念, 它们都属于 *代数数据类型(ADT,
    Algebraic Data Type)*. 代数数据类型的概念来自函数式语言, 尤其在 Haskell 中应
    用最广, 仅通过这两种数据类型就可以构造出大部分的数据结构.

**** 代数数据类型之积类型
     代数数据类型就是指具备了代数能力的数据类型, 即数据类型可以进行代数运算并满
     足一定的运算规则(eg: 可以进行加法或乘法, 满足交换律和结合律). 正是这一点保
     证了数据类型中的许多性质是可以 *复合* 的. eg: 一个结构体中包含的成员都是拥
     有复制语义的简单原始数据类型, 那么这个结构体也可以通过派生属性 ~#[derive]~
     来放心地为其实现 Copy.

     结构体的 *更新语法(update syntax)* 允许使用 ~..~ 语法来减少代码重复.

     Rust 不允许包含了 ~String~ 类型字段的结构体实现 Copy, 看得出来, 代数数据类
     型有力地保证了符合类型的类型安全.

     Rust 中的结构体属于代数数据类型中的 *积类型*. 积类型是来自范畴论的术语, 毕
     竟 Rust 类型系统借鉴了 Haskell 语言, 而 Haskell 语言是范畴论的最佳实践, 但
     这并不代表需要深入 Haskell 或范畴论才能理解它. 积类型也可以通过更直观的 *乘
     法原理* 来理解:

     eg: 一件事需要分成 n 个步骤来完成, 第一步有 m1 种不同的做法, 第二步有 m2 种
     不同的做法, 以此类推, 第 n 步有 mn 种不同的做法, 那么完成这件事公有 N=m1 *
     m2 *... * mn 种不同的做法, 这就是乘法原理. 它描述的是做一件事需要分成很多不,
     每一步之间都相互依赖, 它表示的是一种 *组合* (combination). 如果用逻辑来表示,
     则是 *逻辑与* (合取).

     同理, 结构体这样的符合数据是通过不同字段的值组合而成的. eg: 一个元组结构体
     ~S(i32, u32, String)~, 其实例是 ~(i32, u32, String)~ 这三种字段类型的值相互
     依赖而成的不同组合. 由此可知, 元组也属于积类型. *积类型代表一种数据结构的复
     合方式*, 当一个复合类型需要组合多个成员来共同表达时, 可以使用结构体.

     Rust 中的结构体虽然是代数数据类型, 但也契合了面向对象思想中的封装. 因此, 通
     过结构体完全可以进行面向对象风格的编程.

**** 使用结构体进行面向对象风格编程
     示例说明如何使用结构体进行面向对象风格编程. 假设要实现一个库, 该库的功能是
     在终端(Terminal) 输出指定颜色的字符. 使用该库输出指定颜色字符的代码如下:
     #+begin_src rust
       fn main() {
           let hi = "Hello".red().on_yellow();
           println!("{}", hi);
       }
     #+end_src

     在终端显示带颜色的字符, 需要使用 *ANSI转义序列(ANSI Escape Code)*. ANSI 转
     义序列就是指形如 *ESC* 和 *[* 组合而成的字符序列, 可以实现在屏幕上定位光标
     或改变输出字符颜色等功能, 所以也被称为 *控制字符*, 被定义于 ASCⅡ码中. ~ESC~
     有三种表示方法:

     - 在 Shell 中表示为 *\e*.
     - 以 ASCⅡ 十六进制表示为 *\x1B*
     - 以 ASCⅡ 八进制表示为 *\033*

     所以, 如果想在终端输出带指定颜色的字符 Hello, 需要将其变为包含 ANSI 转移序
     列的字符串, 如下所示:
     #+begin_src sh
       echo "\e[31;43mHello\e[0m"
       echo "\x1B[31;43mHello\x1B[0m"
       echo "\033[31;43mHello\033[0m"
     #+end_src

     *\x1B* 为前缀, 表示这是一个 ANSI 控制序列的开始. 用分号相隔的 *31;43* 属于
      颜色代码, 31 是前景色, 代表红色; 43 为背景色, 代表黄色. 字母 m 为结束符,
      原始文本 Hello 置于其后. 最后的 *\x1B[0m* 结尾代表重置全部属性, 表示一个
      ANSI 控制序列的结束.

      #+begin_example
                             ANSI 转义序列
                         控制字符的一部分   结束字符    重置全部属性
                               |          |             |
                      \x1B     [   31;43  m   Hello  \x1B[0m
                       |              |        |
                   ESC的 ASCⅡ      颜色代码    文本
                   十六进制表示
      #+end_example

      那么, 想把 Hello 转换为此 ANSI 序列吗实际上就是一个字符串的组装. 整个 ANSI
      序列中动态变化的只有两部分, 那就是颜色代码和原始文本, 因此有了初步的实现步
      骤:

      1. 定义一个结构体, 来封装动态变化的两步数据
      2. 为此结构体定义指定颜色的方法, eg: ~red~ 方法和 ~on_yellow~ 方法
      3. 为了实现直接在字符串字面量上链式调用 ~red~ 和 ~on_yellow~ 方法, 就必须
         为 ~&'a str~ 类型也实现 ~red~ 和 ~on_yellow~ 方法.
      4. 为此结构体实现方法, 用于组装 ANSI 字符串序列
      5. 打印结果.

      按照此步骤来逐步实现目标. 创建 ~color.rs~ 存放整个代码.   

      使用 ~const~  在 trait 定义的常量为 *关联常量* (Rust 2018 新增), 和关联类
      似, 由实现该 trait 的类型来指定常量的值 也可以指定部门常量值. 与直接在代码
      中使用数值相比, 关联常量的可读性和可维护性更高一些. 在使用关联常量的时候,
      要注意常量名必须大写, 否则会输出警告. 并且在 trait 要明确标注好常量的类型,
      因为此处编译器无法推断常量的具体类型.

      当实现 ~red~ 方法时, 只需要设置前景色 ~fgcolor~, 而另外两个值却不知道, 原
      始文本有可能是任意字符串, 背景色 ~bgcolor~ 可以设置, 也可以不设置. 同理,
      实现 ~on_yellow~ 方法也存在类似的问题, 所以必须使用默认值. 最直观的办法是
      使用空字符串充当默认值, 类似如下代码:
      #+begin_src rust
        ColoredString {
            input: String::new(),
            fgcolor: String::from("31"),
            bgcolor: String::new()
        }
      #+end_src

      因为 ~red~ 和 ~on_yellow~ 方法返回的均为 ~ColoredString~ 实例, 如果用这种
      方法, 必然会出现重复代码, 为了减少这种重复, 可以使用结构体更新语法来隐式填
      充重复的字段, 写法类似下面这样:
      #+begin_src rust
        ColoredString { fgcolor: String::from("31"), ..self }
        ColoredString { bgcolor: String::from("43"), ..self }
      #+end_src

      但是 Rust *并没有* 为结构体提供类似 C++ 或其他面向对象语言编程语言中的构造
      函数, 在实现 ~red~ 或 ~on_yellow~ 方法时, 如何提供默认值? Rust 在标准库
      ~std::default~ 模块提供了一个叫做 *Default* 的  trait, 可以帮助解决此问题.
      使用 ~Default~ 可以为 ~ColoredString~ 提供默认值.

      因为 ~Default~ 已经在 ~std::prelude::v1~ 模块中被导入, 所以这里可以直接使
      用而不需要显式地导入 trait. *Rust 已经为内置的大部分类型实现了 Default*.

      ~try!~ 宏会在错误时自动返回相应的 ~Err~

      编译通过以后, 直接执行得到的二进制文件, 即可观察到最终运行结果, 正如预期的
      那样. 通过这个简单地示例, 我们可以对 Rust 中使用结构体和 trait 进行面向对
      象风格编程有一个整体的了解.

      但是目前的代码功能有限, 如果想让它支持更多的颜色, 可以考虑使用枚举体, 也可
      称为枚举类型或枚举.

*** 枚举体
    枚举体(Enum)是 Rust 中除结构体之外的另一种重要的复合类型. Rust 之父 Graydon
    把枚举体看得和 lambda 一样重要, 可想而知枚举体的重要性. 枚举体让 Rust 更简洁,
    拥有更强大的表现力.

**** 代数数据类型之和类型
     枚举体属于代数数据类型中的 *和类型(Sum Type)*. 积类型可以借助乘法原理来理解,
     而和类型正好可以借助加法原理来理解. *加法* 原理是指: 如果做一件事有 n 类方
     法, 在第一类办法中有 m1 种不同的方法, 在第二类办法中有 m2 种不同的方法, 以
     此类推, 在第 n 类办法中有 mn 中不同的方法, 那么完成这件事一共有 m1 + m2
     +... + mn 种不同的方法. 因此, 如果说积类型是步步相关的话, 那么和类型就是各
     自独立的. 如果积类型表示 *逻辑与(合取)*, 那和类型就表示 *逻辑或* (析取).

     Rust 用来消除空指针的 ~Option<T>~ 类型就是一种典型的枚举体.
     #+begin_src rust
       pub enum Option<T> {
           None,
           Some(T)
       }
     #+end_src

     ~Option<T>~ 是一种典型的和类型, 它代表 *有* 和 *无* 之和, 将两种的类型构造
     为一种新的复合类型. 枚举体博阿含饿了有限的枚举值, 要使用它们, 必须逐个枚举
     其中每一个值. 和结构体不同的是, 枚举体中的成员是 *值*, 而非类型, 一般把它们
     叫做 *变体(variant)*. 使用枚举体可以更方便地实现多态.

     可以使用枚举体方便地表示颜色:
     #+begin_src rust
       enum Color {
           Red,
           Yellow,
           Blue
       }
     #+end_src

     面向对象中表示颜色的伪代码示意:
     #+begin_src cpp
       class Color {};
       class Red: Color{};
       class Yellow: Color{};
       class Blue: Color{};
     #+end_src

     面向对象语言中, 首先需要定义一个 Color 类, 也需要为具体的颜色定义相应的类,
     eg: ~Red~, ~Yellow~ 和 ~Blue~ 需要各自继承 ~Color~ 来实现相关的方法. 而在
     Rust 中, 只需要枚举体就已足够.

     接下来用枚举体来重构之前 ~color.rs~ 中的代码, 以便可以方便地添加新的颜色.
     之前的代码主要有 *三处需要变动*:
     - 使用枚举体来关闭颜色, 而不是直接在具体的方法中使用颜色代码.
     - 使用模式匹配代替 if 来确认结构体中的 ~fgcolor~ 和 ~bgcolor~ 的设置情况
     - 可以支持通过字符串设置颜色.

**** 重构 color.rs 代码(新文件: color2.rs)
     首先为 ~Color~ 实现相应的方法, 以对于具体的 ANSI 颜色码.
     
     使用 ~Option<Color>~ 类型的默认值可以直接使用 ~None~ 来统一.
     
     接下来, 为 ~Color~ 实现 ~From~, 用于将 ~&str~ 或 ~String~ 类型的字符串转换
     为 ~Color~, 这样做是为了实现通过字符串来设置颜色的需求.

     实现 ~FromStr~ 的 ~from_str~ 方法包含了 *错误处理* 相关的代码, 最终返回一个
     ~Result<Self, Self::Err>~ 类型的结果.

     值得注意的是: ~color~ 和 ~on_color~ 泛型方法中使用了 trait 限定
     ~<S:Into<Color>>~, 这是因为 ~Color~ 实现了 ~From~, 所以对于 ~String~ 和
     ~&'a str~ 类型的字符串均可通过 ~into~ 方法转换为 ~Color~.

     重构后的 ~color2.rs~ 可以使用新添加的方法来设置相应的颜色了, 并且可以使用
     ~color~ 和 ~on_color~ 方法通过字符串来指定颜色.

     通过对 ~color.rs~ 的重构, 我们可以更深刻地体会到枚举体的方便和强大之处. 枚
     举体、结构体和 trait 互相结合, 完全可以进行面向对象风格的编程, 甚至可以比一
     些面向对象语言更简洁而优雅. 更重要的一点是: Rust 是 0 成本抽象的.

*** 析构顺序
    Rust 中变量的析构顺序是和其声明顺序相反的, 但并非所有的类型都按照这个顺序来
    析构.

    用元组模式结构体包装了某个类型, 相当于创造了一个新类型. Newtype 模式在 Rust
    中很常见.

    这样创建的新类型和原始的类型是完全不同的, 以下几种情况适合使用 Newtype 模式:

    - *隐藏实际类型, 限制功能*: 使用 Newtype 模式包装的类型并不能被外界访问, 除
      非提供相应方法
    - *明确语义*: eg: 可以将 ~f64~ 类型包装为 ~Miles(f64)~ 和 ~Kilometers(f64)~,
      分别代表英里和千米. 这样的语义提升是 0 成本的, 没有多余的性能开销.
    - *使用复制语义的类型具有移动语义*: eg: ~f64~ 本来是复制语义, 而包装为
      ~Miles(f64)~ 之后, 因为结构体本身不能被自动实现 Copy, 所以 ~Miles(f64)~ 就
      成了移动语义.

**** 本地变量
     本地变量遵循先声明后析构的规则, 实际上这也缘于栈结构先进后出的特性.

**** 元组
     元组整体的析构顺序和局部变量的析构顺序一致, 但是元组内部元素的析构顺序则和
     局部变量的析构顺序相反, 元组内部是 *按元素的出现顺序依次进行析构的*.

     当元组内成员有 ~panic!()~ 时, 会触发元组的提前析构, 此时提前析构的顺序和布
     局变量的析构顺序一致: 先声明的元素后析构.

**** 结构体和枚举体
     结构体和枚举体与元组的析构顺序是一致的.

     内部元素的析构顺序是按排列顺序来析构的. 同样, 结构体字段如果指定了
     ~panic!()~ 为值, 那么在相同的情况下, 其析构元素也会变得和元组的一致.

     同理, Slice 类型的集合类型的析构顺序, 与元组、结构体和枚举体的析构行为一致.

**** 闭包捕获变量
     闭包捕获变量的析构顺序和结构体的析构顺序也是一致的.

     闭包捕获变量的析构顺序与捕获变量的 *声明顺序无关*, 与闭包内变量的排列顺序一
     致, 与捕获变量声明的顺序是没有关系的, 这里要和普通函数内局部变量相区分. 但
     闭包和元组、结构体类似, 也 *存在析构顺序变化的情况*.

     当变量 ~move~ 到闭包之前先被借用时, 需要等待其离开作用域归还所有权之后, 才
     能被移动到 ~move~ 闭包中, 因此变量被捕获的顺序就会变化.

*** 补充说明: ref 关键字
    ref 关键字与 ~&~ 引用运算符的用法区别: [[https://users.rust-lang.org/t/ref-keyword-versus/18818/14][社区讨论]], [[https://doc.rust-lang.org/stable/rust-by-example/scope/borrow/ref.html][examples]].
    [[https://stackoverflow.com/questions/58292554/what-can-ref-do-that-references-couldnt][功能区别]]
    
    以下等价:
    #+begin_src rust
      struct Foo(String);

      fn bar(foo: &Foo) {
          // &String
          let Foo(ref: foo2) = *foo;

          // &String
          let Foo(foo2) = &foo;

          let foo = &foo.0;
      }
    #+end_src

    执行链接: [[https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7f2786e6838cfc19986bf19d802c6794][play]]
    #+begin_src rust
      #[derive(Clone, Copy)]
      struct Point { x: i32, y: i32 }

      fn main() {
          let c = 'Q';

          // 以下代码等价
          let ref ref_c1 = c;
          let ref_c2 = &c;

          println!("ref_c1 equals ref_c2: {}", *ref_c1 == *ref_c2);

          let point = Point { x: 0, y: 0 };

          // ref 可用于解构结构体
          let _copy_of_x = {
              // 引用
              let Point { x: ref ref_to_x, y: _ } = point;

              // 解引用
              *ref_to_x
          };

          // A mutable copy of `point`
          let mut mutable_point = point;

          {
              let Point { x: _, y: ref mut mut_ref_to_y } = mutable_point;
              // 看似等价
              let mut_ref_to_y = &mut mutable_point.y;

              *mut_ref_to_y = 1;
          }

          println!("point is ({}, {})", point.x, point.y);
          println!("mutable_point is ({}, {})", mutable_point.x, mutable_point.y);

          // A mutable tuple that includes a pointer
          let mut mutable_tuple = (Box::new(5u32), 3u32);

          {
              let (_, ref mut last) = mutable_tuple;
              // 看似等价
              let last = &mut mutable_tuple.1;
              *last = 2u32;
          }

          println!("tuple is {:?}", mutable_tuple);
      }

    #+end_src

** 常用设计模式
   有了 trait , 结构体和枚举体这三驾马车, 我们就可以自由地编写容易扩展的 Rust 代
   码了. 

   自 GoF 四人组([[https://en.wikipedia.org/wiki/Software_design_pattern][wiki]])提出 23 种设计模式的概念至今已经超过 20 年了, 虽然设计模式
   最初是基于面向对象语言提出的, 但是经过这 20 多年的发展, 设计模式已经超越了面
   向对象语言的范畴. 设计模式所阐述的思想被广泛应用于各种语言及其功能项目中. 设
   计模式的思想提供涵盖了下面 4 点:
   - 针对结构编程
   - 组合优于继承
   - 分离变和不变
   - 委托代替继承

   可以说, Rust 语言本身的设计就非常符合这 4 点思想. trait 可以强制地实现针对结
   构编程; 泛型和 trait 限定可替代继承多态, 基于代数数据类型的结构体在没有继承的
   情况下也一样可以更自由地构造各种类型; 类型系统天生分离了变与不变; 常用的迭代
   器就是利用委托来代替继承的.

   Rust 是一门已经实现自举的语言, 其内部实现也用到了很多设计模式. eg: 第 6 章学
   到的迭代器就包含了委托模式和迭代器模式的思想. 在 Rust 的其他诸多项目中也大量
   使用了设计模式. 接下来会依次介绍 Rust 编程中常用的另外几个设计模式.

*** 建造者模式
    Rust 这门语言没哟㧈构造函数, 这主要是出于对类型安全的考量. 

    以一个结构体为例来说明: 如果要构造结构体的实例, 有时候要需要一些模式值, 像
    Java 这种语言会提供默认的构造函数, 并可以将值初始化为 0, 而对于 C++ 来说, 就
    有可能引起未定义行为, 这属于类型不安全的问题. Rust 并没有类似 Java 那样的默
    认机制, 所以 Rust 没有提供构造函数, 而是可以像函数式编程语言那样直接绑定值来
    构造类型实例. 所以, 就需要一些设计模式来辅助完成复杂类实例的构造工作, 而建造
    者模式比较适合这种应用场景, 这也是 Rust 中大量使用这种模式的原因.

    *建造者模式(Builder Pattern)* 是 Rust 中最常用 的设计模式之一. 建造者模式是
    指使用多个简单的对象一步步构建一个复杂对象的模式. 该模式的主要思想就是将变和
    不可变分离. 对于一个复杂对象, 肯定会有不变的部分, 也有变化的部分, 将它们分离
    开, 然后依次构建.

    在 Rust 标准库中有一个用于创建进程的结构体 ~std::process::Command~, 它使用了
    创建者模式.
    
*** 访问者模式  
    Rust 中另一个重要的模式是 *访问者模式(Visitor Pattern)*. 访问者模式用于将数
    据结构和作用域结构上的操作解耦. Rust 语言自身在解析抽象语法树时就用到了访问
    者模式.

**** Rust 编译器源码中的访问者模式
     Rust 解析抽象语法树示意:
     #+begin_src rust
       mod ast {
           pub enum Stmt {
               Expr(Expr),
               Let(Name, Expr)
           }

           pub struct Name {
               value: String
           }

           pub enum Expr {
               IntLit(i64),
               Add(Box<Expr>, Box<Expr>),
               Sub(Box<Expr>, Box<Expr>)
           }
       }

       mod visit {
           use ast::*;

           pub trait Visitor<T> {
               fn visit_name(&mut self, n: &Name) -> T;
               fn visit_stmt(&mut self, n: &Stmt) -> T;
               fn visit_expr(&mut self, e: &Expr) -> T;
           }
       }
     #+end_src

     以上只展示了部分代码. 这段代码是用于 *构建抽象语法树* 的. Rust 词法中包含语
     句、标识符名称和表达式, 分别被定义于 *ast* 模块中的 ~Stmt~, ~Name~ 和
     ~Expr~ 来表示. 关键字 ~mod~ 用于定义一个模块, 在第 10 章会介绍更多关于模块
     的内容.

     这些包含在 ast 模块中的类型虽然各不相同, 但是它们整体是在描述同一个抽象语法
     树结构的. 因此, 整个抽象语法树就是一个异构的结构, 其中的每个语法节点都是不
     同的类型, 对于这些节点的操作也各不相同. 语法节点基本是确定好的, 变化不会太
     大, 但是对节点的操作需要经常改动, eg: Rust 现在正处于开发期, 会定时添加一些
     新特性. 使用访问者模式将不可变的节点和变化的操作分离开, 可以方便后续扩展.
     所以, 访问者模式 *一般包含 2 个层次*:

     - 定义需要操作的元素
     - 定义相关的操作

     对于上述代码来说, ~ast~ 模块定义了抽象语法树中的全部节点相关的数据结构, 而
     ~visit~ 模块中的 Visitor trait 则定义了相关的操作. 所以在解析语法树的时候,
     只需要为解析器实现相关的 visit 方法即可操作相关节点.

     #+begin_src rust
       use visit::*;
       use ast::*;

       struct Interpreter;

       impl Visitor<i64> for Interpreter {
           fn visit_name(&mut self, n: &Name) -> i64 { panic!() }
           fn visit_stmt(&mut self, s: &Stmt) -> i64 {
               match *s {
                   Stmt::Expr(ref e) => self.visit_expr(e),
                   Stmt:::Let(..) => unimplemented!(),
               }
           }
           fn visit_expr(&mut self, e: &Expr) -> i64 {
               match *e {
                   Expr::IntLit(n) => n,
                   Expr::Add(ref lhs, ref rhs) =>
                       self.visit_expr(lhs) + self.visit_expr(rhs),
                   Expr::Sub(ref lhs, ref rhs) =>
                       self.visit_expr(lhs) - self.visit_expr(rhs)
               }
           }
       }
     #+end_src

     为解析器 Interpreter 实现了 Visitor, 对不同的语法树节点有不同的操作方法. 访
     问者模式优雅地把节点数据解雇与其解析操作分离开了, 为后续自由灵活地解析语法
     节点提供了方便.
     
**** Serde 库中的访问者模式
     访问者模式的另一个景点的应用场景是第三方库 *Serde*, 它是一个对 Rust 数据结
     构进行序列化和反序列化的高效框架. Serde 的命名就是分别从 *Serialize(序列化)*
     和 *Deserialize(反序列化)* 两个单词中拿出 *Ser* 和 *De* 两部分组合而成的.

     Serde 之所以称为框架, 是因为其定义了统一的数据模型, 并通过访问者模式开放了
     序列化和反序列化的操作接口. Serde 目前已经支持了很多种数据格式, 包括 JSON、
     XML、BinCode、YAML、MessagePack、TOML 等.

     Serde 中序列化和反序列化都使用了访问者模式, 这里只以反序列化为说明. Serde
     中自定义了一些类型对应 Rust 中可能出现的所有数据类型, 包括基本的原生类型、
     String、option、unit、seq、tuple、tuple_struct、map、struct 等. eg: option
     代表 ~Option<T>~ 类型, tuple_struct 代表元组结构体, seq 代表线性队列(eg:
     ~Vec<T>~ 之类的集合), 而 map 则代表 k-v 结构的容器(eg: ~HashMap<K, V>~). 这
     些异构的类型构成了 Serde 框架的统一的数据模型.

     Serde 提供了 3 个 trait, 源码如下:
     #+begin_src rust
       pub trait Deserialize<'de>: Sized {
           fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
           where
               D: Deserializer<'de>;
       }

       pub trait Deserializer<'de>: Sized {
           type Error: Error;
    
           fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>
           where
               V: Visitor<'de>;
           fn deserialize_str<V>(self, visitor: V) -> Result<V::Value, Self::Error>
           where
               V: Visitor<'de>;
       }

       pub trait Visitor<'de>: Sized {
           type Value;

           fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>
           where
               E: Error,
           {
               Err(Error::invalid_type(Unexpected::Bool(v), &self))
           }

           fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>
           where
               E: Error,
           {
               Err(Error::invalid_type(Unexpected::Str(v), &self))
           }
       }
     #+end_src

     通过 ~Deserializer~ 和 ~Visitor~ 两个 trait 定义了反序列化开放的操作接口.
     这就是 Serde 框架利用访问者模式所定义的主要内容: *统一的数据模型和开放的操
     作接口*. 然后再针对不同的数据格式实现不同的访问者操作方法.

     以 JSON 格式数据反序列化来说明. 第三方库 serde_json 是基于 Serde 实现的
     JSON 解析库, 该库将 JSON 格式中出现的数据类型统一定义为一个 Value 枚举体.
     如下所示:
     #+begin_src rust
       #[derive(Clone, Eq, PartialEq)]
       pub enum Value {
           Null,
           Bool(bool),
           Number(Number),
           String(String),
           Array(Vec<Value>),
           Object(Map<String, Value>),
       }
     #+end_src

     以上定义的枚举 ~Value~ 包含了 6 种枚举值, 基本上涵盖了 JSON 数据格式中所有
     数据类型. 接下来, serde_json 实现了 Serde 框架开放的 trait 接口:
     ~Deserialize~, ~Visitor~ 和 ~Deserializer~, 如下所示:
     #+begin_src rust
       impl<'de> Deserialize<'de> for Value {
           // 反序列化
           #[inline]
           fn deserialize<D>(deserializer: D) -> Result<Value, D::Error>
           where
               D: serde::Deserializer<'de>,
           {
               // 定义及认购提
               struct ValueVisitor;

               // 实现 `Visitor` -- 委托模式
               impl<'de> Visitor<'de> for ValueVisitor {
                   type Value = Value;

                   fn visit_bool<E>(self, value: bool) -> Result<Value, E> {
                       Ok(Value::Bool(value))
                   }
               }

               deserializer.deserialize_any(ValueVisitor)
           }
       }

       impl<'de> serde::Deserializer<'de> for Value {
           type Error = Error;

           #[inline]
           // 专门用于自定义类型反序列化
           // eg: Value 类型
           // 通过一个 `match` 匹配枚举体 `Value` 中定义的 6 种类型, 分别调用
           fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>
           where
               V: Visitor<'de>,
           {
               match self {
                   Value::Null => visitor.visit_unit(),
                   Value::Bool(v) => visitor.visit_bool(v),
                   Value::Number(n) => n.deserialize_any(visitor),
                   #[cfg(any(feature = "std", feature = "alloc"))]
                   Value::String(v) => visitor.visit_string(v),
                   Value::Array(v) => visit_array(v, visitor),
                   Value::Object(v) => visit_object(v, visitor),
               }
           }
       }
     #+end_src

     serde_json 实现了 ~Deserialize~, 其中定义的 ~deserialize~ 方法正是最终用于
     反序列化的方法. 在 ~deserialize~ 方法中定义了结构体 ~ValueVisitor~, 并为其
     实现了 ~Visitor~, 这是一种委托模式.

     serde_json 也为 ~Value~ 实现了 ~serde::Deserializer~. 其中
     ~deserialize_any~ 方法是专门用于自定义反序列化的.

     访问者模式将 *数据结构和操作分离开*, 为代码的扩展提供了极大地便利. 

*** RAII 模式
    Rust 的一大特色就是利用 RAII 进行资源管理, 让我们能够编写更安全的代码.
    
    流程:
    1. ~Letter::new~ 写信
    2. ~buy_envelope~ 买信封
    3. ~wrap~ 装信
    4. ~order_pickup~ 装车


    第一版的问题:
    - ~Letter~ 有可能被复制多分并被装到多个信封(envelope) 里, 不安全.
    - 信封里可能有信, 也可能没信; 或者同一个信封可能装多封不同的信件, 不安全.
    - 无法保证一定把信交给邮车了, 不安全.

    所以, 所谓 RAII 模式, 并非经典的 GoF 中的模式, 它实际上就是利用 Rust 的 RAII
    机制来确保逻辑安全性的一种模式. 这种模式在某些场景中非常适用, eg: 处理 HTTP
    请求的场景. 它也是 Rust 官方团队推荐使用的模式.
