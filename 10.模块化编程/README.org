* 模块化编程
  模块化编程, 是指可以把整个代码分成小块的、分散的、独立的代码块, 这些独立的代码
  块就被称为 *模块*. 把一个复杂的软件系统按一定的信息分割为彼此独立的模块, 有利
  于控制和客服系统的复杂性. 模块化开发除支持多人协作之外, 还支持各部分独立开发、
  测试和系统集成, 甚至可以限制程序错误的影响范围. 总的来说, 模块化编程有如下三点
  好处:

  - *增强维护性*: 一个设计良好的模块, 独立性更高, 对外界的依赖更少, 更方便维护
  - *隔离性*: 拥有各自的命名空间, 避免命名冲突, 限制错误范围等.
  - *代码复用*: 通过引入现成的模块来避免代码复制

  但是只有模块还不足以高效编写结构化的软件系统. 为了方便地继承第三方开发的功能模
  块, 一个简单的解决办法就是按照约定的目录结构来组织模块, 并把此目录结构进一步打
  包成一个独立的模块, 以方便外部集成. 这种按约定的目录结构打包的模块, 就被称为 
  *包*. 在编写一个包的时候, 也难免会依赖第三方包, 而这些被依赖的包也随时可能被更
  新、修改、升级, 所以一般使用版本化管理. 包与包之间的版本依赖关系, 手工处理起来
  比较麻烦, 所以需要使用包管理工具来解决依赖、打包、编译、安装等功能. 
  
  Rust 作为现代化的编程语言, 强有力地支持模块化编程. Rust 中的包管理工具叫做
  *Cargo*, 第三方包叫做 *crate*. Rust 拥抱开源, 所有的第三方包都可以在 Github 上
  面找到, 并且可以通过 Cargo 直接诶发布到包仓库平台 crates.io 上面.

** 包管理
   与其他大多数语言不同的是: 使用 Rust 编写代码的最基本单位是包(crate). Rust 语言
   内置了包管理器 Cargo, 通过使用 Cargo 可以方便地创建包.

   *Cargo 一共做了 4 件事情*:
   1. 使用两个元数据(metadata)文件来记录各种项目信息
   2. 获取并构建项目的依赖关系
   3. 使用正确的参数调用 rustc 或其他构建工具来构建项目
   4. 为 Rust 生态系统开发建立了统一标准的工作流

   通过 Cargo 提供的命令可以很方便地管理包
   
*** 使用 Cargo 创建包
    使用 ~cargo new csv-read --lib~ 命令可以创建一个包, 该包包含的文件有
    ~Cargo.toml~ 和 ~src/lib.rs~, 其中 ~Cargo.toml~ 是包的配置文件, 是使用
    *TOML* 语言编写的. TOML 语言的特色是: 规范简单、语义明显、阅读性高. TOML 专
    门被设计为可以无歧义地映射为哈希表, 从而可以更容易地被解析为各种语言中的数据
    结构. 而 ~Cargo.toml~ 正是元数据文件之一.

    #+begin_src toml
      [package]
      # 包名
      name = "csv-read"
      version = "0.1.0"
      authors = ["Kreedzt <zhaozisong1@live.com>"]
      # Rust 版本
      edition = "2018"

      # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

      [dependencies]

    #+end_src
    
    以上展示了 ~Cargo.toml~ 文件的内容(manifest 文件), 里面记录了用于编译整个包所
    用到的元数据.

    从 Rust 1.30 版本开始, 默认创建的 crate 都会带有 *edition* 选项, 其默认设置
    为 "2018". 这代表默认 crate 使用 *Rust 2018* 版本. 如果有需要, 也可以将其修
    改为 "2015", 以便支持 *Rust 2015 版本*.

    在 ~src/lib.rs~ 中, 初始内容只有 tests 模块. 在 Rust 中使用关键字 mod 来定义
    模块. ~#[cfg(test)]~ 属性为条件编译, 告诉编译器只在运行调试(cargo test 命令)
    时才编译执行. 在 tests 模块中, 生成了一个示例方法 ~it_works()~. 只要进入该包
    的根目录下, 然后执行 ~cargo test~ 命令, 即可看到测试正常运行.

    Rust 也支持在文档注释里写测试

    测试完成后, 项目会多一个 *Cargo.lock* 文件和 target 文件夹. Cargo.lock 是另
    外一个元数据文件, 它和 Cargo.toml 的不同点如下:

    - Cargo.toml 是由开发者编写的, 从广义上来描述项目所需要的各种信息, 包括第三
      方包的依赖
    - Cargo.lock 只记录依赖包的详细信息, 不需要开发者维护, 而是由 Cargo 自动维护
      的.

    target 文件夹是专门用于存储编译后的目标文件的. 编译默认为 *Debug* 模式, 在该
    模式下编译器不会对代码进行任何优化, 所以编译时间较短, 代码运行速度较慢. 也可
    以使用 *--release* 参数来使用发布模式, 在该模式下, 编译器会对代码进行优化,
    使得编译时间变慢, 但是代码运行速度会变快.

    *警告*: 内容有改动, 见 [[https://github.com/ZhangHanDong/tao-of-rust-codes/issues/17][issue]]
    使用 *cargo new --lib* 命令创建的是库文件(生成静态或动态链接库), 它并非可执行
    文件. 使用 *cargo new* 或增加 *--lib* 参数创建的包可被编译为可执行文件.

    在包的根目录下执行 ~cargo build~ 命令可以编译包, ~cargo run~ 可以编译并允许
    该包.

*** 使用第三方包
    在日常开发中, 经常会使用到第三方包. 在 Rust 中使用第三方包非常简单, 只需要在
    Cargo.toml 中的 *[dependencies]* 下面添加想依赖的包即可

    *注意*:
    - 使用 ~extern crate~ 声明引用第三方包是 Rust 2015 版本的写法. 2018 版本中,
      可以省略
    - 使用包名时, 使用下划线替代中横线(强制替换)
    
**** 使用正则表达式 regex 包
     regex 包支持大部分正则功能, 但 *不支持环视(look-around)* 和 *反向引用
     (backreference)*. 这是因为 regex 注重性能和安全, 而环视和反向引用更容易被黑
     客利用制造 *ReDos* 攻击. 如果一定要使用环视和反向引用, 则可以使用
     *fancy-regex* 包.

     regex 包支持多种正则表达式标记, 意义如下:
     - *i*: 匹配时不区分大小写
     - *m*: 多行模式, "^" 和 "$" 对应行首行尾
     - *s*: 允许通配符 "." 匹配 "\n"
     - *U*: 交换 "x*" 和 "x*?" 的意义
     - *u*: 允许支持 Unicode(默认启用).
     - *x*: 忽略 空格并允许注释(以 "#" 开头)

**** 惰性静态初始化 lazy_static 包
     在编程中, 经常会有对全局常量或变量的需求. 
     Rust 支持两种全局类型: *普通常量(Constant)* 和 *静态变量(Static)*. 它们的异
     同之处在于以下几点:

     - 都是在编译期求值的, 所以不来用于存储需要动态分配内存的类型. eg:
       ~HashMap~, ~Vector~ 等
     - 普通常量是可以被内联的, 它没有确定的内存地址, 不可变.
     - 静态变量不能呗内联, 它又精确的内存地址, 拥有静态生命周期.
     - 静态变量可以通过内部包含 ~UnsafeCell~ 等的容器实现内部可变性
     - 静态变量还有其他限制: eg: 不包货任何析构函数、包含的值类型必须实现了
       ~Sync~ 以保证线程安全、不能引用其他静态变量
     - 普通常量也不能引用静态变量.

     *在存储的数据比较大、需要引用地址或具有可变性的情况下使用静态变量*; 否则, 
     *应该优先使用普通常量*. 但也有一些情况是这两种全局类型无法满足的, eg: 想使
     用全局的 ~HashMap~ 或 ~Vector~, 或者在使用正则表达式时只让其编译一次来提升
     性能. 在这种情况下, 推荐使用 lazy_static 包.

     利用 lazy_static 包可以把定义全局静态变量延迟到运行时, 而非编译时, 所以冠之
     以 "惰性(lazy)". 
     
     使用 ~mod~ 关键字定义的模块, 内部定义的变量或方法默认是私有的. 要喜爱那个药
     模块外调用内部常量或方法, 必须通过 *pub* 关键字将可见性改为公开的.

     在使用 ~lazy_static!~ 宏时, 必须严格按照宏内语法的格式来书写, 否则会引发线
     程恐慌.

     想在多线程访问变量, 然而变量类型没有实现 ~Sync~ 时, 必须使用 *同步锁* 或 
     *互斥锁* 来包装.

     ~RwLock~ 与 ~Mutex~ 区别:
     - ~Rwlock~ 读写锁是 *多读单写* 锁, 也叫共享独占锁. 它允许多个线程读, 单个线
       程写. 但是在写的时候, 只能有一个线程占有写锁; 而在读的时候, 允许任意线程
       获取读锁. 读锁和写锁 *不能被同时获取*
     - ~Mutex~ 互斥锁: 只允许 *单个线程读和写*

     所以在读数据比较频繁远远大于写数据的情况下, 使用 ~RwLock~ 读写锁可以给程序
     带来更高的并发支持. 在下一章会对它们做更详细的介绍.

     使用 ~RwLock~ 时, 操作数据要注意 *读写隔离*, 读锁和写锁不能同一作用域获取,
     否则会造成死锁情况. 在 Rust 中, 叫做 "*中毒(Poison)*".

     *其他注意事项*:
     - 使用 ~lazy_static!~ 宏定义的全局静态变量如果有析构函数, 则是 *不会被调用
       的*, 因为是静态生命周期
     - 在 ~lazy_static!~ 宏中不能定义太多的全局静态变量, 否则会引发线程恐慌. 这
       是因为在 ~lazy_static!~ 宏中调用了内部的宏, *Rust 对宏的递归调用有次数限
       制*. 可以通过在当前编写的包中加上 ~#![recurison_limit="128"]~ 属性修改上
       限, 默认值为 32.

     在不久的将来, Rust 的 CTFE(编译时函数执行)功能进一步完善之后, 在某些场景中
     也许就不需要使用 lazy_static 包了.
     
**** 指定第三方包的依赖关系
     Rust 包使用的是 *语义化版本号* (SemVer). 基本格式为 "X.Y.Z", 版本号递增规则
     如下:

     - X: 主版本号(major). 当做了不兼容或颠覆性的更新时, 修改此版本号
     - Y: 次版本号(minor). 当做了向下兼容的功能性修改时, 修改此版本号.
     - Z: 修订版本号(patch). 当做了向下兼容的问题修正时, 修改此版本号

     语义化版本号是为了解决 "依赖地狱" 的问题. 随着系统规模的增长, 加入的第三方
     包就会越来越多, 包之间的依赖关系也会越来越复杂, 容易造成 "依赖地狱".

     指定版本号范围的标记有以下几种:
     - *补注号(^)*: 允许新版本号在不修改[major, minor, patch] 中最左边非零数字的
       情况下才能更新.
     - *通配符(*)*: 可以用在 [major, minor, patch] 的任何一个上面.
     - *波浪线(~)*: 允许修改 [major, minor, patch] 中没有明确指定的版本号.
     - *手动指定*: 通过 >, >=, <, <=, = 来指定版本号
       
     #+begin_example
       // := 表示等价于
       // 补注号示例
       ^1.2.3  :=  >=1.2.3  <2.0.0
       ^1.2  :=  >=1.2.0  <2.0.0
       ^1  :=  >=1.0.0  <2.0.0
       ^0.2.3  :=  >=0.2.3  <0.3.0
       ^0.0.3  :=  >=0.0.3  <0.0.4
       ^0.0  :=  >=0.0.0  <0.1.0

       // 通配符示例
       :=  >= 0.0.0
       1.*  :=  >=1.0.0  <2.0.0
       1.2.*  :=  >=1.2.0  <1.3.0

       // 波浪线示例
       ~1.2.3  :=  >=1.2.3  <1.3.0
       ~1.2  :=  >=1.2.0  <1.3.0
       ~1  :=  >=1.0.0  <2.0.0

       // 手动指定
       >= 1.2.0
       > 1
       < 2
       = 1.2.3

       // 手动指定多个版本
       >= 1.2, < 1.5
     #+end_example
     
     可以直接指定 git 仓库地址
     #+begin_src toml
       [dependencies]
       rand = { git = "https://github.com/rust-lang-nursery/rand" }
     #+end_src

     可以使用 path 来指定本地包
     #+begin_src toml
       [dependencies]
       hello_world = { path = "hello_world", version = "0.1.0" }
     #+end_src

** Cargo.toml 文件格式
   TOML 文件是通用的格式, 可以用它表示任何配置格式. Cargo 也有一套专用的 TOML 配
   置格式.

   现以第三方包 regex 作为示例说明.

*** [package] 表配置
    #+begin_src toml
      [package]
      # 名称
      name = "regex"
      # 版本
      version = "1.4.1"
      # 作者
      authors = ["The Rust Project Developers"]
      exclude = ["/scripts/*", "/.github/*"]
      autotests = false
      # 描述
      description = "An implementation of regular expressions for Rust. This implementation uses\nfinite automata and guarantees linear time matching on all inputs.\n"
      homepage = "https://github.com/rust-lang/regex"
      # 文档地址
      documentation = "https://docs.rs/regex"
      readme = "README.md"
      categories = ["text-processing"]
      license = "MIT OR Apache-2.0"
      # 源码仓库地址
      repository = "https://github.com/rust-lang/regex"
    #+end_src

    在 TOML 语言中, [package] 这种语法叫做 *表(Table)*. 在 [package] 表里描述的
    都是和 regex 包有感的元数据, 包名(name)、作者(authors)、源码仓库地址
    (repository)、文档地址(documentation)、包功能的简要介绍(description)、包的分
    类(categories)等.

    该表是 *必不可少* 的.

*** [badges] 表配置
    #+begin_src toml
      [badges]
      travis-ci = { repository = "jonas-schievink/adler" }
      maintenance = { status = "actively-developed" }
    #+end_src

    这两项表配置表示可以在 [[https://crates.io][crates.io]] 网站上显示这两项的展示徽章. 都是云端的持续
    集成服务平台, 前者支持 Linux 和 MacOS 系统, 后者支持 Windows 系统. 该表示是
    一个可选表

*** [workspace] 表配置
    [workspace] 表代码工作空间(Workspace). 指在同一个根包(crate)下博啊发了你多个
    子包)crate.
    #+begin_src toml
      [workspace]
      members = ["bench", "regex-capi", "regex-debug", "regex-syntax"]
    #+end_src

    工作空间中的子包都有自己的 Cargo.toml 配置, 各自独立, 互不影响. 在根包的
    Cargo.toml 中指定的依赖项, 也不会影响到子包. 不管是编译根包还是子包, 最终的
    编译结果永远都会输出到根包的 target 目录下, 并且整个工作空间只允许有一个
    Cargo.lock 文件.

    
*** [dependencies] 表配置
    #+begin_src toml
      # For very fast prefix literal matching.
      [dependencies.aho-corasick]
      version = "0.7.6"
      optional = true

      # For skipping along search text quickly when a leading byte is known.
      [dependencies.memchr]
      version = "2.2.1"
      optional = true

      # For managing regex caches quickly across multiple threads.
      [dependencies.thread_local]
      version = "1"
      optional = true

      # For parsing regular expressions.
      [dependencies.regex-syntax]
      path = "regex-syntax"
      version = "0.6.20"
      default-features = false

      [dev-dependencies]
      # For examples.
      lazy_static = "1"
      # For property based tests.
      quickcheck = { version = "0.8", default-features = false }
      # For generating random test data.
      rand = "0.6.5"
    #+end_src
    该表专门用于设置第三方包的依赖, 这些依赖会执行 cargo build 命令编译时使用.
    [dev-dependencies] 表的作用与之相似, 只不过它只用来设置测试(tests), 示例
    (examples) 和基准测试(benchmarks)时使用的依赖, 在执行 cargo test 或 cargo
    bench 命令时使用.

*** [features] 表配置
    #+begin_src toml
      [features]
      default = ["std", "perf", "unicode", "regex-syntax/default"]

      std = []
      # The 'use_std' feature is DEPRECATED. It will be removed in regex 2. Until
      # then, it is an alias for the 'std' feature.
      use_std = ["std"]


      # PERFORMANCE FEATURES

      # Enables all performance features.
      perf = ["perf-cache", "perf-dfa", "perf-inline", "perf-literal"]
      # Enables fast caching. (If disabled, caching is still used, but is slower.)
      perf-cache = ["thread_local"]
      # Enables use of a lazy DFA when possible.
      perf-dfa = []
      # Enables aggressive use of inlining.
      perf-inline = []
      # Enables literal optimizations.
      perf-literal = ["aho-corasick", "memchr"]


      # UNICODE DATA FEATURES

      # Enables all Unicode features. This expands if new Unicode features are added.
      unicode = [
      "unicode-age",
      "unicode-bool",
      "unicode-case",
      "unicode-gencat",
      "unicode-perl",
      "unicode-script",
      "unicode-segment",
      "regex-syntax/unicode",
      ]
      # Enables use of the `Age` property, e.g., `\p{Age:3.0}`.
      unicode-age = ["regex-syntax/unicode-age"]
      # Enables use of a smattering of boolean properties, e.g., `\p{Emoji}`.
      unicode-bool = ["regex-syntax/unicode-bool"]
      # Enables Unicode-aware case insensitive matching, e.g., `(?i)β`.
      unicode-case = ["regex-syntax/unicode-case"]
      # Enables Unicode general categories, e.g., `\p{Letter}` or `\pL`.
      unicode-gencat = ["regex-syntax/unicode-gencat"]
      # Enables Unicode-aware Perl classes corresponding to `\w`, `\s` and `\d`.
      unicode-perl = ["regex-syntax/unicode-perl"]
      # Enables Unicode scripts and script extensions, e.g., `\p{Greek}`.
      unicode-script = ["regex-syntax/unicode-script"]
      # Enables Unicode segmentation properties, e.g., `\p{gcb=Extend}`.
      unicode-segment = ["regex-syntax/unicode-segment"]


      # UNSTABLE FEATURES (requires Rust nightly)

      # A blanket feature that governs whether unstable features are enabled or not.
      # Unstable features are disabled by default, and typically rely on unstable
      # features in rustc itself.
      unstable = ["pattern"]

      # Enable to use the unstable pattern traits defined in std. This is enabled
      # by default if the unstable feature is enabled.
      pattern = []
    #+end_src

    该表的配置项与 *条件编译有关*. 在 Rust 中, 有一种特殊的属性 *#[cfg]*, 叫做 
    *条件编译属性*, 该属性允许编译器按指定的标记选择性地编译代码. 在此例中,
    pattern 表示允许使用 std 标准库中定义的 Pattern trait, 但是该 trait 目前还处
    于未定状态, 所以使用了 unstable 配置.

    #+begin_src rust
      #[cfg(not(feature = "perf-cache"))]
      mod imp;
      #[cfg(feature = "perf-cache")]
      mod imp;
    #+end_src
    
    以上代码意味着: 当 cargo build --features "perf-cache" 命令时, 在 Cargo 内部
    调用 Rust 编译器 rustc 会传 --cfg feature="perf-cache" 标记, 此时会选择后者
    编译. not 作用正好相反.

*** [lib] 表配置
    #+begin_src toml
      [lib]
      # There are no benchmarks in the library code itself
      bench = false
      # Doc tests fail when some features aren't present. The easiest way to work
      # around this is to disable automatic doc testing, but explicitly test them
      # with `cargo test --doc`.
      doctest = false
    #+end_src

    [lib] 表用来表示 *最终编译目标库的信息*.

    该表完整的配置项主要包含以下几类:
    - name: 
      eg: ~name="foo"~, 表示将来编译的库名字为 "libfoo.a" 或 "libfoo.so" 等.
    - crate-type:
      eg: ~crate-type=["dylib", "staticlib"]~, 表示可以同时编译生成动态库和静态
      库.
    - path:
      eg: ~path="src/lib.rs"#~, 表示库文件入口, 如果不指定, 则默认是 ~src/lib.rs~.
    - test:
      eg: ~test=true~, 表示可以使用单元测试
    - bench:
      eg: ~bench=true~, 表示可以使用性能基准测试

*** [test] 表配置
    #+begin_src toml
      [[test]]
      path = "tests/test_default.rs"
      name = "default"

      # The same as the default tests, but run on bytes::Regex.
      [[test]]
      path = "tests/test_default_bytes.rs"
      name = "default-bytes"

      # Run the test suite on the NFA algorithm over Unicode codepoints.
      [[test]]
      path = "tests/test_nfa.rs"
      name = "nfa"

      # Run the test suite on the NFA algorithm over bytes that match UTF-8 only.
      [[test]]
      path = "tests/test_nfa_utf8bytes.rs"
      name = "nfa-utf8bytes"

      # Run the test suite on the NFA algorithm over arbitrary bytes.
      [[test]]
      path = "tests/test_nfa_bytes.rs"
      name = "nfa-bytes"

      # Run the test suite on the backtracking engine over Unicode codepoints.
      [[test]]
      path = "tests/test_backtrack.rs"
      name = "backtrack"

      # Run the test suite on the backtracking engine over bytes that match UTF-8
      # only.
      [[test]]
      path = "tests/test_backtrack_utf8bytes.rs"
      name = "backtrack-utf8bytes"

      # Run the test suite on the backtracking engine over arbitrary bytes.
      [[test]]
      path = "tests/test_backtrack_bytes.rs"
      name = "backtrack-bytes"

      # Run all backends against each regex found on crates.io and make sure
      # that they all do the same thing.
      [[test]]
      path = "tests/test_crates_regex.rs"
      name = "crates-regex"
    #+end_src

    多组 [[test]\] 表示一个数组.

    [[test]\] 表示支持的配置项和 [lib] 表基本相同

*** [profile] 表配置
    #+begin_src toml
      [profile.release]
      debug = true

      [profile.bench]
      debug = true

      [profile.test]
      debug = true
    #+end_src

    Cargo 支持自定义 rustc 配置, 使用 [profile] 表进行配置即可, 但只对 *根包* 中
    的 profile 配置有效.

    [profile.release] 语法表示嵌套, 等价于 JSON 对象的子属性.

    以上三项表配置分别代表 Release、Bench 和 Test 编译模式 除此之外, Cargo 还支
    持 [profile.dev] 代表 Debug 模式.

    在本例中, 当前的配置代表在 Release、Bench 和 Test 模式下, 均包含 Debug 信息.
    除 debug 配置项外, 还支持用于自定义欧华级别的 opt-level、连接时间优化的 lto
    等.
    
*** 子包 bench 中的 Cargo.toml
    #+begin_src toml
      [package]
      # ...

      # 设置构建脚本(当前包的根目录下)
      build = "build.rs"
      # 当前包根目录的上一层目录
      workspace = ".."

      [[bin]]
      # 生成的可执行文件的名称
      # 若想用其他文件名, 则必须放到 `src/bin` 目录下
      name = "regex-run-one"
      path = "src/main.rs"
      # 希望生成可执行文件时不去执行基准测试
      bench = false

      [[bench]]
      name = "bench"
      path = "src/bench.rs"
      test = false
      bench = true
    #+end_src

** 自定义 Cargo
   Cargo 允许修改本地配置来自定义一些信息, eg: 命令别名、源地址等. 默认的全局配
   置位于 "$HOME/.cargo/config" 文件(windows 为 "%USERPROFILE%\.cargo\config")
   中
   
   #+begin_src toml
     # 代表 crates.io 的相关配置
     [registry]
     # 在 `crates.io` 上注册帐号以后由网站颁发的, 用于开发者在发布包(crate)时通过平台样子
     token = "your_crates_io_token"

     # 表示 Cargo 的源
     [source.crates-io]
     registry = "https://github.com/rust-lang/crates.io-index"

     # 定义命令别名
     [alias]
     b = "build"
     t = "test"
     r = "run"
     rr = "run --release"
     ben = "bench"
     space_example = ["run", "--release", "--", "\"command list\""]

     [http]
     proxy = "http://127.0.0.1:7890"

     [https]
     proxy = "http://127.0.0.1:7890"
   #+end_src

   
*** Cargo 配置文件的层级关系说明
    与 git 一样支持层级概念:
    可以全局配置, 也可以针对具体的项目(包)进行配置, 如下所示:
    - 所有用户的全局配置: ~/.cargo/config~
    - 当前用户的全局配置: ~$HOME/.cargo/config~
    - 根包 regex 的配置: ~/regex/.cargo/config~

    *Cargo 配置会从上到下层层覆盖, 上下层的配置并不会相互影响*.

*** 自定义 Cargo 子命令
    Cargo 允许自定义命令来满足一些特殊的要求. 
    只要在 *$PATH* (环境变量) 中能查到以 "cargo-" 为前缀的二进制文件, eg:
    cargo-someghing, 就可通过 cargo something 来调用此命令.

    eg: 在日常开发中专门用于格式化 Rust 代码的第三方 Cargo 扩展 rustfmt, 就是这
    样来扩展 Cargo 命令的.

    可以通过下列命令来安装 rustfmt:
    - 稳定版(Stable) Rust: ~rustup component add rustfmt~
    - 每夜版(Nightly) Rust: ~rustup component add rustfmt --toolchain nightly~
    
    通过 ~cargo --list~ 命令来查看当前可用的全部命令, 就可以发现多了一个 ~fmt  ~
    命令, 然后就可以直接调用 ~cargo fmt~ 命令来格式化 Rust 文件. 同时还会产生
    一个 *.bk 文件作为备份. 如果有些地方不想被 rustfmt 处理, 只需要在该处上方添
    加 ~#[rustfmt_skip]~ 属性即可.

    [[https://github.com/rust-lang/rustfmt][rustfmt 源码]] 中 ~Cargo.toml~ 文件的部分配置
    #+begin_src toml
      [[bin]]
      name = "rustfmt"
      path = "src/rustfmt/main.rs"
      required-features = ["rustfmt"]

      [[bin]]
      name = "cargo-fmt"
      path = "src/cargo-fmt/main.rs"
      required-features = ["cargo-fmt"]

      [[bin]]
      name = "rustfmt-format-diff"
      path = "src/format-diff/main.rs"
      required-features = ["rustfmt-format-diff"]

      [[bin]]
      name = "git-rustfmt"
      path = "src/git-rustfmt/main.rs"
      required-features = ["git-rustfmt"]
    #+end_src

    一共配置了 4 个可执行文件的名字, 其中包括了 cargo-fmt, 所以使用 ~cargo fmt~
    可以调用.
    
    *警告*: 此处有改动
    path 分别对应了执行的文件.
    
    [[https://rust-lang.github.io/rustfmt/][rustfmt 配置文档]]

    Cargo 还提供了 2 个在开发中相当有用的工具: cargo-fix 和 cargo-clippy. 其中
    cargo-fix 提供了 ~cargo fix~ 命令, 可以为开发者自动修复编译过程中出现的
    Warning. ~cargo-clippy~ 是 Rust 静态代码分析工具, 提供了 ~cargo clippy~ 命令,
    帮助开发者检测代码中潜在的错误和不规范代码, 并且从 Rust 1.29 版本开始可用于
    Rust 稳定版中.
    
** 模块系统
   Rust 官方推断鼓励开发者在开发包(crate)的时候, 尽可能做到最小化, 每个包都应该
   尽量只负责单一的完整功能. 有些第三方包, 代码量比较少, 只需要单个文件(eg:
   ~src/lib.rs~) 就能完成整个功能. 有些包代码量却很多, 可以卸载单个文件中来实现
   整个功能, 但是不利于维护.

   Rust 是一门支持模块化的语言, 对于代码量比较大的包, 可以将其按文件分割为不同的
   模块, 这样可以更合理地组织代码.

   在单个文件中, 可以使用 *mod* 关键字来声明一个模块. 在 ~static_hashmap~ 包中,
   就使用 ~mod~ 关键字声明了 ~static_kv~ 模块. 在 Rust 中单个文件同时也是一个默
   认的模块, 文件名就是模块名. *每个包都拥有一个顶级(top-level)模块~src/lib.rs~
   或 ~src/main.rs~ \*.


*** Rust 2015 模块
    Cargo 会自动查找文件夹下的 ~mod.rs~ 文件作为该模块的根文件

    Cargo 查找文件是从包的根目录开始的, 而不是当前文件的想对目录. 使用 ~super~
    关键字可以让 Cargo 以相对路径的方式查找文件, ~super~ 代表当前文件的上一层目
    录.

    Rust 中的模块可以按照类似于文件系统的方式进行组织, Cargo 会根据 *文件名即模块
    名* 的默认约定来查找相关模块.

    导入宏 *必须在根文件* 中导入, 使用 ~#[macro_use] extern crate xxx~;

*** Rust 2018 模块
    *警告*: 内容有改动
    Rust 2018 模块改进的内容:
    - 不在需要在根模块中使用 ~extern crate~ 语法导入第三方包
    - 在模块导入路径中使用 ~crate~ 关键字表示当前 ~crate~
    - 按照特定的规则, ~mod.rs~ 可以省略.
    - ~use~ 语句可以使用嵌套风格来导入模块.
    - 导入宏仅在 *需要的文件中导入*, 使用 ~use~ 关键字导入.

    Rust 会通过 ~mod~ 关键字自动到当前模块中的子模块中寻找 ~static_kv~ 模块.

    ~use~ 语句使用 ~crate~ 关键字前缀代表引入的是当前 ~crate~ 中定义的模块.
    ~self~ 表明以当前相对路径寻找. 如果是第三方包, 不需要写 ~crate~ 前缀.

** 从 0 开始实现一个完整功能包
   编写一个命令行工具, 可以接受一个 CSV 文件, 并且可以指定固定的值覆盖指定列的所
   有数据, 然后将结果输出到新的 CSV 文件中.

*** 使用 Cargo 创建新项目
    input 文件夹放入源文件, output 用以存储输出文件

    基本思路: 直接使用 ~std::env::args~ 或使用第三方包来解析参数

*** 使用 structopt 解析命令行参数
    可选的第三方包邮 2 个: clap 和 structopt. 其中 clap 的功能非常强大, 但是使用
    起来没有那么直观; 而 structopt 则是在 clap 基础上构建而成的, 简化了操作. 所
    以这里选用 structopt 包. 

    因为 structopt 是基于 *过程宏(Procedural Macro)* 的, 所以它需要依赖
    structopt-derive 包.

    定义的 Opt 结构体用于构建以下命令:
    #+begin_example
      USAGE:
          csv_challenge [FLAGS] <input> <column_name> <replacement> [output]
    #+end_example
    
    - csv_challenge: 为编译后的可执行文件
    - [FLAGS]: 为 Flag 参数, 一般侧重于表示 "开" 和 "关" 的标记.
    - <input>: 表示输入文件, 也就是原始 CSV 文件路径. 对应于定义的 input 成员,
      并通过 ~#[structopt...]~ 属性设置 help 说明文字
    - <column_name>: 表示指定要替换的 CSV 文件头部字段. 它对应于字段 column_name.
    - <replacement>: 表示要替换的值, 对应 replacement
    - [output]: 表示输出的文件路径. 对应 output, 因为该参数可以省略, 由默认的输
      出文件路径代替.


    *警告*: 内容有改动
    使用 ~cargo run~ 编译好后, 默认可执行文件在 ~target/debug/~ 下, windows 平台
    为 *.exe, unix 平台为 *.out 或无后缀名. 执行 ~./target/debug/csv_challenge
    --help~ 可以看到 structopt 生成的说明.

*** 定义统一的错误类型
    
*** 读取 CSV 文件
    *Rust 将文件路径抽象为两种类型*:
    - *Path*: 没有所有权
    - *PathBuf*: 独立所有权

    以上对路径的抽象可以让开发者无视底层操作系统的差异, 统一处理文件路径.

    在模块 ~std::fs~ 中定义了操作本地文件系统的基本方法, 使用其提供的 ~open()~
    和 ~crate()~ 方法来打开和创建 CSV 文件. 在离开作用域的时候, *文件会被自动关闭*.
** 进一步完善包
   增加项目的测试和文档, Rust 支持 4 种测试: *单元测试*, *文档测试*, *集成测试*
   和 *基准测试*. 其中基准测试专门用于性能测试.

*** 单元测试
   若想忽略已 ~#[test]~ 属性的函数测试, 只需在 ~#[test]~ 属性下面再添加
   ~#[ignore]~ 属性即可.

*** 集成测试
    集成测试用于测试包的整体功能.

    使用 ~main.rs~ 配合 ~lib.rs~ 的形式, 是二进制包的 *最佳实践*.

*** 增加文档和文档测试
    使用三斜线注释(~///~)可以为函数增加文档注释, 支持 Markdown 语法, 增加代码块
    默认识别为 Rust 代码, 并且会 *执行文档测试*. 代码块语言定义为 *ignore* 时忽
    略执行

    使用 ~//!~ 在包的根模块或任意模块文件 *顶部* 增加模块级文档: 为整个模块而不
    是单独为其下方的语法元素生成文档.

    使用 ~cargo doc~ 生成文档, ~cargo doc --open~ 生成并打开文档

*** 增加性能基准测试
    Cargo 会识别当前包 ~benches~ 目录作为性能基准测试目录.

    要使用性能基准测试, 必须启用 ~#[features(test)]~. 该功能必须在 ~nightly~ 版
    本的 Rust 下可用.

    ~test::Bencher~ 提供了 ~iter()~ 方法, 接收闭包作为参数. 若要写性能测试代码,
    那么只要将其放到该闭包中即可.

    使用 ~#[bench]~ 属性标注函数视为基准测试函数

*** 发布到 crates.io
    现在可以把具有完整功能的包发布到 *crates.io* 平台. 注册 crates.io 网站帐号后,
    个人主页生成 Api Token, 配置到 ~.cargo/config~ 的 *[registry]* 下面, 然后使
    用 ~cargo login~ 登录.

    最后在包的根目录下使用 ~cargo publish~ 命令会自动将其编译打包上传到
    crates.io 平台. 也可以单独使用 ~cargo package~ 命令先打包再发布. 打包以后的
    文件可以在 ~target/package~ 目录下找到.

    ~cargo publish~ 报错可能因为 *[packages]* 表中还缺失必要的元信息. 添加并发布
    后, 其他开发者就可以通过 ~cargo install~ 命令来安装并使用此包.
