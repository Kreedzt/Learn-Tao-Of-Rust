* 函数、闭包与迭代器
  语言影响或觉得人类的思维方式.org
  Rust 是一门混合范式的编程语言, 有机地融合了面向对象、函数式和方向编程范式. 它
  并非将这些特性进行简单堆砌, 而是通过高度一致性的类型系统融合了这三种范式的编程
  思想. 可以通过 ~impl~ 关键字配合结构体和 trait 来实现面向对象范式中的多态和封
  装, 也可以通过函数、高阶函数、闭包、模式匹配来实现函数式范式中的一些编程工具.
  Rust 支持 0 成本静态分发的泛型编程, 并且将它很好地融入了其他两种编程范式中, 提
  供了更高的抽象层次. 通过将这三种编程范式完美融合起来, Rust 语言拥有了更高程度
  的抽象以及更强的表达能力.

  函数式语言的历史要比面向对象语言悠久, 它源自古老的 LISP 语言, 其后发明的语言或
  多或少都受到了函数式编程思想的影响, eg: Python, Ruby, 以及更纯的函数式语言
  HasKell. 随着摩尔定律的失效, CPU 性能的提升转为主要依赖核数的增加, 多核时代到
  来后, 函数式编程因为其天生对并发友好的特性又逐渐受到了重视. 所以近年来很多新诞
  生的语言也吸收了函数式范式的诸多特性, eg: Elixir, Scala, Swift 都收到了 LISP
  和 HasKell 的影响, 对代数数据类型(algebraic data type)、模式匹配、高阶函数、闭
  包等特性各有所支持. 甚至一些年代久远的主流语言, eg: C++ 和 Java 也都开始吸收函
  数式语言的特性. Rust 作为一门在多核时代诞生的现代编程语言, 引入函数式编程范式
  完全是顺势而为的.

  本章内容主要从函数和闭包 2 个方面来探讨 Rust 对函数式编程范式的支持, 还会讲迭
  代器及其在闭包中的应用.
  
** 函数
   
